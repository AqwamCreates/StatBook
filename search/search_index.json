{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to StatBook v1 Documentation! DOWNLOAD \ud83d\udcbf Welcome to the ultimate guide for StatBook v1 ! Whether you're looking for ways to generate random variables in a more diverse and/or dynamic way than math.random does, looking to predict the next move of a player, consistently update analytics for product sales, or simply curious about random variable generations and hypothesis testing, you're in the right place! What Will You Find Here? Comprehensive Guides : From the basic statistical functions to complex hypothesis testing, we've got you covered. Code Examples : Looking for Lua code snippets? This is your go-to resource. Advanced Techniques : Understand the maths and mechanics behind linear regression, random variable generations, and more. Table of Contents How To Use : New here? Start with this guide to make the most out of this documentation. Hypothesis Testing Inference - used for measuring if the distributions of samples differ Multiple Linear Regression - measure correlations between predictors and a dependent variable Predict Y Categorical Testing Odds Ratio One Sample Proportion CI Two Proportion Inference Goodness of Fit Chi-Square Independence Random Variate Generation Customized Distribution Random From Dataset Markov Chain Non-Scaled Generate Standard Normal Generate Normal Generate Gamma Generate Inverse Gamma Generate Exponential Generate Beta Generate Log Normal Generate Beta Prime Generate Levy Generate Poisson Generate Cauchy Generate Weibull Generate Chi Square Generate Pareto Generate T Scaled Generate Standard Normal Scaled Generate Normal Scaled Generate Log Normal Scaled Generate Cauchy Scaled Generate Exponential Scaled Generate Gamma Scaled Generate Beta Scaled Other Basic Statistics Sum of Squares Mean Median Mode Range Standard Deviation Variance Interquartile Range Factorial Complex Functions Error Function Inverse Error Function Gamma Function Hypergeometric 2F1 Incomplete Beta Regularized Incomplete Beta Matrix Operations Matrix Addition Matrix Subtraction Matrix Multiplication Scalar Matrix Multiplication Matrix Transposition Matrix Inversion Contributing We welcome contributions! Feel free to submit an issue on the Roblox developer forum page or create a pull request . Last Updated : October 3, 2023","title":"Home"},{"location":"#welcome-to-statbook-v1-documentation","text":"","title":"Welcome to StatBook v1 Documentation!"},{"location":"#download","text":"Welcome to the ultimate guide for StatBook v1 ! Whether you're looking for ways to generate random variables in a more diverse and/or dynamic way than math.random does, looking to predict the next move of a player, consistently update analytics for product sales, or simply curious about random variable generations and hypothesis testing, you're in the right place!","title":"DOWNLOAD \ud83d\udcbf"},{"location":"#what-will-you-find-here","text":"Comprehensive Guides : From the basic statistical functions to complex hypothesis testing, we've got you covered. Code Examples : Looking for Lua code snippets? This is your go-to resource. Advanced Techniques : Understand the maths and mechanics behind linear regression, random variable generations, and more.","title":"What Will You Find Here?"},{"location":"#table-of-contents","text":"How To Use : New here? Start with this guide to make the most out of this documentation.","title":"Table of Contents"},{"location":"#hypothesis-testing","text":"Inference - used for measuring if the distributions of samples differ Multiple Linear Regression - measure correlations between predictors and a dependent variable Predict Y","title":"Hypothesis Testing"},{"location":"#categorical-testing","text":"Odds Ratio One Sample Proportion CI Two Proportion Inference Goodness of Fit Chi-Square Independence","title":"Categorical Testing"},{"location":"#random-variate-generation","text":"Customized Distribution Random From Dataset Markov Chain","title":"Random Variate Generation"},{"location":"#non-scaled","text":"Generate Standard Normal Generate Normal Generate Gamma Generate Inverse Gamma Generate Exponential Generate Beta Generate Log Normal Generate Beta Prime Generate Levy Generate Poisson Generate Cauchy Generate Weibull Generate Chi Square Generate Pareto Generate T","title":"Non-Scaled"},{"location":"#scaled","text":"Generate Standard Normal Scaled Generate Normal Scaled Generate Log Normal Scaled Generate Cauchy Scaled Generate Exponential Scaled Generate Gamma Scaled Generate Beta Scaled","title":"Scaled"},{"location":"#other","text":"","title":"Other"},{"location":"#basic-statistics","text":"Sum of Squares Mean Median Mode Range Standard Deviation Variance Interquartile Range Factorial","title":"Basic Statistics"},{"location":"#complex-functions","text":"Error Function Inverse Error Function Gamma Function Hypergeometric 2F1 Incomplete Beta Regularized Incomplete Beta","title":"Complex Functions"},{"location":"#matrix-operations","text":"Matrix Addition Matrix Subtraction Matrix Multiplication Scalar Matrix Multiplication Matrix Transposition Matrix Inversion","title":"Matrix Operations"},{"location":"#contributing","text":"We welcome contributions! Feel free to submit an issue on the Roblox developer forum page or create a pull request . Last Updated : October 3, 2023","title":"Contributing"},{"location":"How_To_Use/","text":"How to Use StatBook_v1 Module Follow these steps to integrate the StatBook_v1 module into your project: Step 1: Download the Module Download the StatBook_v1 module from this link . Step 2: Place the Module Place the downloaded StatBook_v1 module into ServerScriptService within your Roblox Studio project. Step 3: Import the Module in Your Script When using the module in your script, add the following line to import it: local StatBook = require(game.ServerScriptService.StatBook_v1) Step 4: Use Functions from the Module When you need to use a function from this library, always prepend the function call with \"StatBook.\". For example: local StatBook = require(game.ServerScriptService.StatBook_v1) local result = StatBook.Median(list) And you are all set! By following these steps, you'll be able to use all the statistical functions provided by the StatBook_v1 module in your Roblox game.","title":"How To Use"},{"location":"How_To_Use/#how-to-use-statbook_v1-module","text":"Follow these steps to integrate the StatBook_v1 module into your project:","title":"How to Use StatBook_v1 Module"},{"location":"How_To_Use/#step-1-download-the-module","text":"Download the StatBook_v1 module from this link .","title":"Step 1: Download the Module"},{"location":"How_To_Use/#step-2-place-the-module","text":"Place the downloaded StatBook_v1 module into ServerScriptService within your Roblox Studio project.","title":"Step 2: Place the Module"},{"location":"How_To_Use/#step-3-import-the-module-in-your-script","text":"When using the module in your script, add the following line to import it: local StatBook = require(game.ServerScriptService.StatBook_v1)","title":"Step 3: Import the Module in Your Script"},{"location":"How_To_Use/#step-4-use-functions-from-the-module","text":"When you need to use a function from this library, always prepend the function call with \"StatBook.\". For example: local StatBook = require(game.ServerScriptService.StatBook_v1) local result = StatBook.Median(list)","title":"Step 4: Use Functions from the Module"},{"location":"How_To_Use/#and-you-are-all-set","text":"By following these steps, you'll be able to use all the statistical functions provided by the StatBook_v1 module in your Roblox game.","title":"And you are all set!"},{"location":"IQR/","text":"interquartileRange(values) Overview The interquartileRange function calculates the Interquartile Range (IQR) of a given list of numbers. The IQR is the range between the first quartile (Q1) and the third quartile (Q3) of a data set, providing a measure of statistical dispersion. Parameters Parameter Name Type Description Required Default Value values table A list of numerical values for which the IQR will be calculated. The list must contain at least two numerical values. Yes N/A Returns Type Description Possible Values number The Interquartile Range (IQR) of the elements in the list. The return value will be a floating-point number. Any numerical value Constraints The values parameter must be a table containing numerical values only. The table must have at least two elements; otherwise, an error will be thrown. Example Use local myValues = {1, 2, 3, 4, 5} -- The IQR of the list {1, 2, 3, 4, 5} will be calculated local result = StatBook.interquartileRange(myValues) -- Output will be the calculated IQR print(result)","title":"interquartileRange"},{"location":"IQR/#interquartilerangevalues","text":"","title":"interquartileRange(values)"},{"location":"IQR/#overview","text":"The interquartileRange function calculates the Interquartile Range (IQR) of a given list of numbers. The IQR is the range between the first quartile (Q1) and the third quartile (Q3) of a data set, providing a measure of statistical dispersion.","title":"Overview"},{"location":"IQR/#parameters","text":"Parameter Name Type Description Required Default Value values table A list of numerical values for which the IQR will be calculated. The list must contain at least two numerical values. Yes N/A","title":"Parameters"},{"location":"IQR/#returns","text":"Type Description Possible Values number The Interquartile Range (IQR) of the elements in the list. The return value will be a floating-point number. Any numerical value","title":"Returns"},{"location":"IQR/#constraints","text":"The values parameter must be a table containing numerical values only. The table must have at least two elements; otherwise, an error will be thrown.","title":"Constraints"},{"location":"IQR/#example-use","text":"local myValues = {1, 2, 3, 4, 5} -- The IQR of the list {1, 2, 3, 4, 5} will be calculated local result = StatBook.interquartileRange(myValues) -- Output will be the calculated IQR print(result)","title":"Example Use"},{"location":"chiSquareIndependence/","text":"chiSquareIndependence(matrix, CL) Overview The chiSquareIndependence function performs Pearson's Chi-Squared Test for Independence. This test checks whether two categorical variables are independent of each other. Parameters Parameter Type Description Default matrix Table The contingency table as a 2D array. - CL Number Confidence level for the test. 0.95 Returns Return Type Description pValue Number The p-value of the Chi-Squared Test. rejectH0 Boolean Whether to reject the null hypothesis at the given alpha. stat Number The Chi-Squared statistic. df Number The degrees of freedom. parametric Boolean Whether the test is parametric (always true for this test). testType String Specifies the type of test, \"Pearson's Test for Independence/Homogeneity\". statType String Specifies the type of statistic used, \"Chi-Square\". warning Boolean Whether the sample size is too small for a reliable test. Example local matrix = {{19, 24}, {43, 32}} local CL = 0.95 local result = chiSquareIndependence(matrix, CL) print(result.pValue, result.rejectH0, result.stat, result.df, result.warning) -- Output will vary based on the input Mathematical Background The Chi-Squared statistic \\chi^2 \\chi^2 is calculated as: \\chi^2 = \\sum \\frac{(O_{ij} - E_{ij})^2}{E_{ij}} \\chi^2 = \\sum \\frac{(O_{ij} - E_{ij})^2}{E_{ij}} Where O_{ij} O_{ij} and E_{ij} E_{ij} are the observed and expected frequencies, respectively. i i and j j are the row and column indices of the contingency table. The expected frequency E_{ij} E_{ij} is calculated as: E_{ij} = \\frac{(R_i \\times C_j)}{n} E_{ij} = \\frac{(R_i \\times C_j)}{n} Where R_i R_i and C_j C_j are the total frequencies of the i^{th} i^{th} row and j^{th} j^{th} column, respectively, and n n is the total sample size. The degrees of freedom df df are: df = (r - 1) \\times (c - 1) df = (r - 1) \\times (c - 1) Where r r and c c are the number of rows and columns in the contingency table, respectively. A p-value is calculated based on the Chi-Squared statistic and degrees of freedom. A warning is issued if more than 20% of the expected frequencies are less than 5.","title":"chiSquareIndependence"},{"location":"chiSquareIndependence/#chisquareindependencematrix-cl","text":"","title":"chiSquareIndependence(matrix, CL)"},{"location":"chiSquareIndependence/#overview","text":"The chiSquareIndependence function performs Pearson's Chi-Squared Test for Independence. This test checks whether two categorical variables are independent of each other.","title":"Overview"},{"location":"chiSquareIndependence/#parameters","text":"Parameter Type Description Default matrix Table The contingency table as a 2D array. - CL Number Confidence level for the test. 0.95","title":"Parameters"},{"location":"chiSquareIndependence/#returns","text":"Return Type Description pValue Number The p-value of the Chi-Squared Test. rejectH0 Boolean Whether to reject the null hypothesis at the given alpha. stat Number The Chi-Squared statistic. df Number The degrees of freedom. parametric Boolean Whether the test is parametric (always true for this test). testType String Specifies the type of test, \"Pearson's Test for Independence/Homogeneity\". statType String Specifies the type of statistic used, \"Chi-Square\". warning Boolean Whether the sample size is too small for a reliable test.","title":"Returns"},{"location":"chiSquareIndependence/#example","text":"local matrix = {{19, 24}, {43, 32}} local CL = 0.95 local result = chiSquareIndependence(matrix, CL) print(result.pValue, result.rejectH0, result.stat, result.df, result.warning) -- Output will vary based on the input","title":"Example"},{"location":"chiSquareIndependence/#mathematical-background","text":"The Chi-Squared statistic \\chi^2 \\chi^2 is calculated as: \\chi^2 = \\sum \\frac{(O_{ij} - E_{ij})^2}{E_{ij}} \\chi^2 = \\sum \\frac{(O_{ij} - E_{ij})^2}{E_{ij}} Where O_{ij} O_{ij} and E_{ij} E_{ij} are the observed and expected frequencies, respectively. i i and j j are the row and column indices of the contingency table. The expected frequency E_{ij} E_{ij} is calculated as: E_{ij} = \\frac{(R_i \\times C_j)}{n} E_{ij} = \\frac{(R_i \\times C_j)}{n} Where R_i R_i and C_j C_j are the total frequencies of the i^{th} i^{th} row and j^{th} j^{th} column, respectively, and n n is the total sample size. The degrees of freedom df df are: df = (r - 1) \\times (c - 1) df = (r - 1) \\times (c - 1) Where r r and c c are the number of rows and columns in the contingency table, respectively. A p-value is calculated based on the Chi-Squared statistic and degrees of freedom. A warning is issued if more than 20% of the expected frequencies are less than 5.","title":"Mathematical Background"},{"location":"customizedDistribution/","text":"customizedDistribution(piecewiseFunctions, desiredMin, desiredMax) Overview The function generates a random number based on custom piecewise functions within the desired range. Parameters Parameter Type Description piecewiseFunctions Table A table containing subtables, each with a function string, x_{\\text{min}} x_{\\text{min}} , and x_{\\text{max}} x_{\\text{max}} for each piecewise function. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. Returns Return Type Description randomX Number A scaled random number in the range [desiredMin, desiredMax] . Example local functions = {{\"x^2\", 0, 2}, {\"2*x\", 2, 4}} local randomX = StatBook.customizedDistribution(functions, 0, 10) print(randomX) -- Output will vary Mathematical Background The function employs a Monte Carlo method using the custom piecewise functions provided. It randomly selects one of the piecewise functions and generates a random coordinate (\\text{randomX}, \\text{randomY}) (\\text{randomX}, \\text{randomY}) within its range and below its absolute maximum value. The function value at this \\text{randomX} \\text{randomX} is calculated using the user-provided function, and the coordinate is accepted if \\text{randomY} \\leq \\text{number} \\text{randomY} \\leq \\text{number} . The accepted \\text{randomX} \\text{randomX} value is then scaled to fall within [desiredMin, desiredMax] . \\text{randomX} = \\text{desiredMin} + \\left( \\text{randomX} - x_{\\text{min}} \\right) \\times \\frac{\\text{desiredMax} - \\text{desiredMin}}{x_{\\text{max}} - x_{\\text{min}}} \\text{randomX} = \\text{desiredMin} + \\left( \\text{randomX} - x_{\\text{min}} \\right) \\times \\frac{\\text{desiredMax} - \\text{desiredMin}}{x_{\\text{max}} - x_{\\text{min}}}","title":"customizedDistribution"},{"location":"customizedDistribution/#customizeddistributionpiecewisefunctions-desiredmin-desiredmax","text":"","title":"customizedDistribution(piecewiseFunctions, desiredMin, desiredMax)"},{"location":"customizedDistribution/#overview","text":"The function generates a random number based on custom piecewise functions within the desired range.","title":"Overview"},{"location":"customizedDistribution/#parameters","text":"Parameter Type Description piecewiseFunctions Table A table containing subtables, each with a function string, x_{\\text{min}} x_{\\text{min}} , and x_{\\text{max}} x_{\\text{max}} for each piecewise function. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number.","title":"Parameters"},{"location":"customizedDistribution/#returns","text":"Return Type Description randomX Number A scaled random number in the range [desiredMin, desiredMax] .","title":"Returns"},{"location":"customizedDistribution/#example","text":"local functions = {{\"x^2\", 0, 2}, {\"2*x\", 2, 4}} local randomX = StatBook.customizedDistribution(functions, 0, 10) print(randomX) -- Output will vary","title":"Example"},{"location":"customizedDistribution/#mathematical-background","text":"The function employs a Monte Carlo method using the custom piecewise functions provided. It randomly selects one of the piecewise functions and generates a random coordinate (\\text{randomX}, \\text{randomY}) (\\text{randomX}, \\text{randomY}) within its range and below its absolute maximum value. The function value at this \\text{randomX} \\text{randomX} is calculated using the user-provided function, and the coordinate is accepted if \\text{randomY} \\leq \\text{number} \\text{randomY} \\leq \\text{number} . The accepted \\text{randomX} \\text{randomX} value is then scaled to fall within [desiredMin, desiredMax] . \\text{randomX} = \\text{desiredMin} + \\left( \\text{randomX} - x_{\\text{min}} \\right) \\times \\frac{\\text{desiredMax} - \\text{desiredMin}}{x_{\\text{max}} - x_{\\text{min}}} \\text{randomX} = \\text{desiredMin} + \\left( \\text{randomX} - x_{\\text{min}} \\right) \\times \\frac{\\text{desiredMax} - \\text{desiredMin}}{x_{\\text{max}} - x_{\\text{min}}}","title":"Mathematical Background"},{"location":"erf/","text":"erf(x) Overview The erf function computes the error function of a given real number x x . The error function is defined as: \\text{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt \\text{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt In this implementation, the error function is approximated by a series expansion up to 100 terms. Parameters Parameter Name Type Description Required Default Value x number The real number for which the error function will be computed. Yes N/A Returns Type Description Possible Values number The error function value of the input x x . Any real number Constraints The x parameter must be a real number. Example Use local number = 1.0 -- The error function of 1.0 will be calculated local result = StatBook.erf(number) -- Output will be the error function value for 1.0 print(result)","title":"erf"},{"location":"erf/#erfx","text":"","title":"erf(x)"},{"location":"erf/#overview","text":"The erf function computes the error function of a given real number x x . The error function is defined as: \\text{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt \\text{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt In this implementation, the error function is approximated by a series expansion up to 100 terms.","title":"Overview"},{"location":"erf/#parameters","text":"Parameter Name Type Description Required Default Value x number The real number for which the error function will be computed. Yes N/A","title":"Parameters"},{"location":"erf/#returns","text":"Type Description Possible Values number The error function value of the input x x . Any real number","title":"Returns"},{"location":"erf/#constraints","text":"The x parameter must be a real number.","title":"Constraints"},{"location":"erf/#example-use","text":"local number = 1.0 -- The error function of 1.0 will be calculated local result = StatBook.erf(number) -- Output will be the error function value for 1.0 print(result)","title":"Example Use"},{"location":"factorial/","text":"factorial(x) Overview The factorial function computes the factorial of a given non-negative integer n n . The factorial, denoted n! n! , is the product of all positive integers less than or equal to n n . For example, 5! = 5 * 4 * 3 * 2 * 1 = 120 5! = 5 * 4 * 3 * 2 * 1 = 120 . Parameters Parameter Name Type Description Required Default Value x number The non-negative integer for which the factorial will be calculated. Yes N/A Returns Type Description Possible Values number The factorial of the input number x x . Any non-negative integer Constraints The x parameter must be a non-negative integer. Factorial of negative integers is undefined, so such input should be avoided. Example Use local number = 5 -- The factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120 local result = StatBook.factorial(number) print(result)","title":"factorial"},{"location":"factorial/#factorialx","text":"","title":"factorial(x)"},{"location":"factorial/#overview","text":"The factorial function computes the factorial of a given non-negative integer n n . The factorial, denoted n! n! , is the product of all positive integers less than or equal to n n . For example, 5! = 5 * 4 * 3 * 2 * 1 = 120 5! = 5 * 4 * 3 * 2 * 1 = 120 .","title":"Overview"},{"location":"factorial/#parameters","text":"Parameter Name Type Description Required Default Value x number The non-negative integer for which the factorial will be calculated. Yes N/A","title":"Parameters"},{"location":"factorial/#returns","text":"Type Description Possible Values number The factorial of the input number x x . Any non-negative integer","title":"Returns"},{"location":"factorial/#constraints","text":"The x parameter must be a non-negative integer. Factorial of negative integers is undefined, so such input should be avoided.","title":"Constraints"},{"location":"factorial/#example-use","text":"local number = 5 -- The factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120 local result = StatBook.factorial(number) print(result)","title":"Example Use"},{"location":"gamma/","text":"gamma(x) Overview The gamma function calculates the Gamma function \\Gamma(x) \\Gamma(x) using the Lanczos approximation method. Parameters Parameter Type Description x Number The value to find the Gamma function of. Returns Return Type Description gam Number The calculated Gamma function value \\Gamma(x) \\Gamma(x) . Example local x = 5 local result = StatBook.gamma(x) print(result) Mathematical Background The function calculates \\Gamma(x) \\Gamma(x) using the Lanczos approximation, which is an efficient method to compute the Gamma function for complex numbers. The method approximates \\Gamma(z) \\Gamma(z) by: \\Gamma(z) \\approx \\sqrt{2\\pi} \\left( z + \\frac{5}{6} \\right)^{z+\\frac{1}{2}} e^{-(z+\\frac{5}{6})} \\left( c_0 + \\frac{c_1}{z+1} + \\frac{c_2}{z+2} + \\cdots + \\frac{c_n}{z+n} \\right) \\Gamma(z) \\approx \\sqrt{2\\pi} \\left( z + \\frac{5}{6} \\right)^{z+\\frac{1}{2}} e^{-(z+\\frac{5}{6})} \\left( c_0 + \\frac{c_1}{z+1} + \\frac{c_2}{z+2} + \\cdots + \\frac{c_n}{z+n} \\right) Here c_0, c_1, \\cdots, c_n c_0, c_1, \\cdots, c_n are precomputed coefficients used in the approximation.","title":"gamma"},{"location":"gamma/#gammax","text":"","title":"gamma(x)"},{"location":"gamma/#overview","text":"The gamma function calculates the Gamma function \\Gamma(x) \\Gamma(x) using the Lanczos approximation method.","title":"Overview"},{"location":"gamma/#parameters","text":"Parameter Type Description x Number The value to find the Gamma function of.","title":"Parameters"},{"location":"gamma/#returns","text":"Return Type Description gam Number The calculated Gamma function value \\Gamma(x) \\Gamma(x) .","title":"Returns"},{"location":"gamma/#example","text":"local x = 5 local result = StatBook.gamma(x) print(result)","title":"Example"},{"location":"gamma/#mathematical-background","text":"The function calculates \\Gamma(x) \\Gamma(x) using the Lanczos approximation, which is an efficient method to compute the Gamma function for complex numbers. The method approximates \\Gamma(z) \\Gamma(z) by: \\Gamma(z) \\approx \\sqrt{2\\pi} \\left( z + \\frac{5}{6} \\right)^{z+\\frac{1}{2}} e^{-(z+\\frac{5}{6})} \\left( c_0 + \\frac{c_1}{z+1} + \\frac{c_2}{z+2} + \\cdots + \\frac{c_n}{z+n} \\right) \\Gamma(z) \\approx \\sqrt{2\\pi} \\left( z + \\frac{5}{6} \\right)^{z+\\frac{1}{2}} e^{-(z+\\frac{5}{6})} \\left( c_0 + \\frac{c_1}{z+1} + \\frac{c_2}{z+2} + \\cdots + \\frac{c_n}{z+n} \\right) Here c_0, c_1, \\cdots, c_n c_0, c_1, \\cdots, c_n are precomputed coefficients used in the approximation.","title":"Mathematical Background"},{"location":"generateBeta/","text":"generateBeta(alpha, beta) Overview The generateBeta(alpha, beta) function generates a random number that follows a Beta distribution. Parameters Parameter Type Description alpha Number The first shape parameter of the Beta distribution. beta Number The second shape parameter of the Beta distribution. Returns Return Type Description result Number A random number from a Beta distribution. Example local result = StatBook.generateBeta(2, 5) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a Beta distribution with shape parameters \\alpha \\alpha and \\beta \\beta . The Beta distribution is often used in statistics to describe probabilities and proportions. To generate result result , the function first generates two gamma-distributed random variables x x and y y using the Marsaglia and Tsang method for gamma distribution. The x x value is generated with \\alpha \\alpha and \\beta \\beta set to 1, and y y value is generated with \\alpha \\alpha set to beta and \\beta \\beta set to 1. The function then calculates result result using: result = \\frac{x}{x + y} result = \\frac{x}{x + y}","title":"generateBeta"},{"location":"generateBeta/#generatebetaalpha-beta","text":"","title":"generateBeta(alpha, beta)"},{"location":"generateBeta/#overview","text":"The generateBeta(alpha, beta) function generates a random number that follows a Beta distribution.","title":"Overview"},{"location":"generateBeta/#parameters","text":"Parameter Type Description alpha Number The first shape parameter of the Beta distribution. beta Number The second shape parameter of the Beta distribution.","title":"Parameters"},{"location":"generateBeta/#returns","text":"Return Type Description result Number A random number from a Beta distribution.","title":"Returns"},{"location":"generateBeta/#example","text":"local result = StatBook.generateBeta(2, 5) print(result) -- Output will vary","title":"Example"},{"location":"generateBeta/#mathematical-background","text":"The function generates a random number result result that follows a Beta distribution with shape parameters \\alpha \\alpha and \\beta \\beta . The Beta distribution is often used in statistics to describe probabilities and proportions. To generate result result , the function first generates two gamma-distributed random variables x x and y y using the Marsaglia and Tsang method for gamma distribution. The x x value is generated with \\alpha \\alpha and \\beta \\beta set to 1, and y y value is generated with \\alpha \\alpha set to beta and \\beta \\beta set to 1. The function then calculates result result using: result = \\frac{x}{x + y} result = \\frac{x}{x + y}","title":"Mathematical Background"},{"location":"generateBetaPrime/","text":"generateBetaPrime(alpha, beta) Overview The generateBetaPrime(alpha, beta) function generates a random number that follows a beta prime distribution. Parameters Parameter Type Description alpha Number The shape parameter alpha for the beta prime distribution. Must be greater than 0. beta Number The shape parameter beta for the beta prime distribution. Must be greater than 0. Returns Return Type Description result Number A random number from a beta prime distribution. Example local result = StatBook.generateBetaPrime(1, 1) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a beta prime distribution with shape parameters \\alpha \\alpha and \\beta \\beta . The Beta Prime distribution is defined as: f(x;\\alpha, \\beta) = \\frac{x^{\\alpha-1}(1+x)^{-\\alpha-\\beta}}{B(\\alpha, \\beta)} f(x;\\alpha, \\beta) = \\frac{x^{\\alpha-1}(1+x)^{-\\alpha-\\beta}}{B(\\alpha, \\beta)} where B(\\alpha, \\beta) B(\\alpha, \\beta) is the beta function. To generate result result , the function utilizes the Gamma distribution through two shape parameters \\alpha \\alpha and \\beta \\beta . It generates two Gamma-distributed random variables y_1 y_1 and y_2 y_2 with \\alpha \\alpha and \\beta \\beta respectively. Then, result result is computed as: result = \\frac{y_1}{y_2} result = \\frac{y_1}{y_2}","title":"generateBetaPrime"},{"location":"generateBetaPrime/#generatebetaprimealpha-beta","text":"","title":"generateBetaPrime(alpha, beta)"},{"location":"generateBetaPrime/#overview","text":"The generateBetaPrime(alpha, beta) function generates a random number that follows a beta prime distribution.","title":"Overview"},{"location":"generateBetaPrime/#parameters","text":"Parameter Type Description alpha Number The shape parameter alpha for the beta prime distribution. Must be greater than 0. beta Number The shape parameter beta for the beta prime distribution. Must be greater than 0.","title":"Parameters"},{"location":"generateBetaPrime/#returns","text":"Return Type Description result Number A random number from a beta prime distribution.","title":"Returns"},{"location":"generateBetaPrime/#example","text":"local result = StatBook.generateBetaPrime(1, 1) print(result) -- Output will vary","title":"Example"},{"location":"generateBetaPrime/#mathematical-background","text":"The function generates a random number result result that follows a beta prime distribution with shape parameters \\alpha \\alpha and \\beta \\beta . The Beta Prime distribution is defined as: f(x;\\alpha, \\beta) = \\frac{x^{\\alpha-1}(1+x)^{-\\alpha-\\beta}}{B(\\alpha, \\beta)} f(x;\\alpha, \\beta) = \\frac{x^{\\alpha-1}(1+x)^{-\\alpha-\\beta}}{B(\\alpha, \\beta)} where B(\\alpha, \\beta) B(\\alpha, \\beta) is the beta function. To generate result result , the function utilizes the Gamma distribution through two shape parameters \\alpha \\alpha and \\beta \\beta . It generates two Gamma-distributed random variables y_1 y_1 and y_2 y_2 with \\alpha \\alpha and \\beta \\beta respectively. Then, result result is computed as: result = \\frac{y_1}{y_2} result = \\frac{y_1}{y_2}","title":"Mathematical Background"},{"location":"generateBetaScaled/","text":"generateBetaScaled(alpha, beta, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile) Overview The function generates a scaled random number based on a Beta distribution with specified shape parameters ( \\alpha \\alpha and \\beta \\beta ) within the desired range. Parameters Parameter Type Description alpha Number The first shape parameter of the Beta distribution. beta Number The second shape parameter of the Beta distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0. UQpercent Number Upper quantile percentage. Default is 1. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided. Returns Return Type Description scaledX Number A scaled random number in the range [desiredMin, desiredMax] . Example local scaledX = StatBook.generateBetaScaled(2, 5, 0, 1) print(scaledX) -- Output will vary Mathematical Background The function generates random numbers x x and y y that follow Gamma distributions with parameters \\alpha \\alpha and \\beta \\beta respectively, and then derives a Beta-distributed random number \\text{result} = \\frac{x}{x+y} \\text{result} = \\frac{x}{x+y} . This result is then scaled to the desired range using the formula: \\text{scaledX} = \\text{scaleToDesiredRange}(\\text{result}, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{scaledX} = \\text{scaleToDesiredRange}(\\text{result}, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the Beta-distributed random number \\text{result} \\text{result} , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"generateBetaScaled"},{"location":"generateBetaScaled/#generatebetascaledalpha-beta-desiredmin-desiredmax-lqpercent-uqpercent-lowerquantile-upperquantile","text":"","title":"generateBetaScaled(alpha, beta, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile)"},{"location":"generateBetaScaled/#overview","text":"The function generates a scaled random number based on a Beta distribution with specified shape parameters ( \\alpha \\alpha and \\beta \\beta ) within the desired range.","title":"Overview"},{"location":"generateBetaScaled/#parameters","text":"Parameter Type Description alpha Number The first shape parameter of the Beta distribution. beta Number The second shape parameter of the Beta distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0. UQpercent Number Upper quantile percentage. Default is 1. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided.","title":"Parameters"},{"location":"generateBetaScaled/#returns","text":"Return Type Description scaledX Number A scaled random number in the range [desiredMin, desiredMax] .","title":"Returns"},{"location":"generateBetaScaled/#example","text":"local scaledX = StatBook.generateBetaScaled(2, 5, 0, 1) print(scaledX) -- Output will vary","title":"Example"},{"location":"generateBetaScaled/#mathematical-background","text":"The function generates random numbers x x and y y that follow Gamma distributions with parameters \\alpha \\alpha and \\beta \\beta respectively, and then derives a Beta-distributed random number \\text{result} = \\frac{x}{x+y} \\text{result} = \\frac{x}{x+y} . This result is then scaled to the desired range using the formula: \\text{scaledX} = \\text{scaleToDesiredRange}(\\text{result}, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{scaledX} = \\text{scaleToDesiredRange}(\\text{result}, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the Beta-distributed random number \\text{result} \\text{result} , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"Mathematical Background"},{"location":"generateCauchy/","text":"generateCauchy(x0, gamma) Overview The generateCauchy(x0, gamma) function generates a random number that follows a Cauchy distribution. Parameters Parameter Type Description x0 Number The location parameter of the Cauchy distribution. gamma Number The scale parameter of the Cauchy distribution. Returns Return Type Description result Number A random number from a Cauchy distribution. Example local result = StatBook.generateCauchy(0, 1) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a Cauchy distribution with location parameter x0 x0 and scale parameter \\gamma \\gamma . The probability density function (pdf) of the Cauchy distribution is defined as: f(x; x0, \\gamma) = \\frac{1}{\\pi \\gamma [1 + (\\frac{x - x0}{\\gamma})^2]} f(x; x0, \\gamma) = \\frac{1}{\\pi \\gamma [1 + (\\frac{x - x0}{\\gamma})^2]} In this implementation, the random variable from the Cauchy distribution is generated using the formula: \\text{result} = x0 + \\gamma \\tan(\\pi (U - 0.5)) \\text{result} = x0 + \\gamma \\tan(\\pi (U - 0.5)) where U U is a uniformly distributed random number between 0 and 1.","title":"generateCauchy"},{"location":"generateCauchy/#generatecauchyx0-gamma","text":"","title":"generateCauchy(x0, gamma)"},{"location":"generateCauchy/#overview","text":"The generateCauchy(x0, gamma) function generates a random number that follows a Cauchy distribution.","title":"Overview"},{"location":"generateCauchy/#parameters","text":"Parameter Type Description x0 Number The location parameter of the Cauchy distribution. gamma Number The scale parameter of the Cauchy distribution.","title":"Parameters"},{"location":"generateCauchy/#returns","text":"Return Type Description result Number A random number from a Cauchy distribution.","title":"Returns"},{"location":"generateCauchy/#example","text":"local result = StatBook.generateCauchy(0, 1) print(result) -- Output will vary","title":"Example"},{"location":"generateCauchy/#mathematical-background","text":"The function generates a random number result result that follows a Cauchy distribution with location parameter x0 x0 and scale parameter \\gamma \\gamma . The probability density function (pdf) of the Cauchy distribution is defined as: f(x; x0, \\gamma) = \\frac{1}{\\pi \\gamma [1 + (\\frac{x - x0}{\\gamma})^2]} f(x; x0, \\gamma) = \\frac{1}{\\pi \\gamma [1 + (\\frac{x - x0}{\\gamma})^2]} In this implementation, the random variable from the Cauchy distribution is generated using the formula: \\text{result} = x0 + \\gamma \\tan(\\pi (U - 0.5)) \\text{result} = x0 + \\gamma \\tan(\\pi (U - 0.5)) where U U is a uniformly distributed random number between 0 and 1.","title":"Mathematical Background"},{"location":"generateCauchyScaled/","text":"generateCauchyScaled(x0, gamma, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile) Overview The function generates a scaled random number based on a Cauchy distribution with a specified location parameter ( x_0 x_0 ) and scale parameter ( \\gamma \\gamma ) within the desired range. Parameters Parameter Type Description x0 Number The location parameter of the Cauchy distribution. gamma Number The scale parameter of the Cauchy distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0.001. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided. Returns Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] . Example local random = StatBook.generateCauchyScaled(0, 1, -10, 10) print(random) -- Output will vary Mathematical Background The function generates a random number x x that follows a Cauchy distribution and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"generateCauchyScaled"},{"location":"generateCauchyScaled/#generatecauchyscaledx0-gamma-desiredmin-desiredmax-lqpercent-uqpercent-lowerquantile-upperquantile","text":"","title":"generateCauchyScaled(x0, gamma, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile)"},{"location":"generateCauchyScaled/#overview","text":"The function generates a scaled random number based on a Cauchy distribution with a specified location parameter ( x_0 x_0 ) and scale parameter ( \\gamma \\gamma ) within the desired range.","title":"Overview"},{"location":"generateCauchyScaled/#parameters","text":"Parameter Type Description x0 Number The location parameter of the Cauchy distribution. gamma Number The scale parameter of the Cauchy distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0.001. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided.","title":"Parameters"},{"location":"generateCauchyScaled/#returns","text":"Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] .","title":"Returns"},{"location":"generateCauchyScaled/#example","text":"local random = StatBook.generateCauchyScaled(0, 1, -10, 10) print(random) -- Output will vary","title":"Example"},{"location":"generateCauchyScaled/#mathematical-background","text":"The function generates a random number x x that follows a Cauchy distribution and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"Mathematical Background"},{"location":"generateChiSquare/","text":"generateChiSquare(df) Overview The generateChiSquare(df) function generates a random number that follows a Chi-Square distribution with degrees of freedom df . Parameters Parameter Type Description df Number Degrees of freedom for the Chi-Square distribution. Returns Return Type Description result Number A random number from a Chi-Square distribution. Example local result = StatBook.generateChiSquare(5) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a Chi-Square distribution with df df degrees of freedom. The probability density function (pdf) for the Chi-Square distribution is: f(x; df) = \\frac{x^{(df/2 - 1)} e^{-x/2}}{2^{df/2} \\Gamma(df/2)} \\quad \\text{for } x \\geq 0, df > 0 f(x; df) = \\frac{x^{(df/2 - 1)} e^{-x/2}}{2^{df/2} \\Gamma(df/2)} \\quad \\text{for } x \\geq 0, df > 0 In this implementation, the Chi-Square distribution is generated using the gamma distribution: \\text{result} = \\text{GenerateGamma}(df / 2, 0.5) \\text{result} = \\text{GenerateGamma}(df / 2, 0.5)","title":"generateChiSquare"},{"location":"generateChiSquare/#generatechisquaredf","text":"","title":"generateChiSquare(df)"},{"location":"generateChiSquare/#overview","text":"The generateChiSquare(df) function generates a random number that follows a Chi-Square distribution with degrees of freedom df .","title":"Overview"},{"location":"generateChiSquare/#parameters","text":"Parameter Type Description df Number Degrees of freedom for the Chi-Square distribution.","title":"Parameters"},{"location":"generateChiSquare/#returns","text":"Return Type Description result Number A random number from a Chi-Square distribution.","title":"Returns"},{"location":"generateChiSquare/#example","text":"local result = StatBook.generateChiSquare(5) print(result) -- Output will vary","title":"Example"},{"location":"generateChiSquare/#mathematical-background","text":"The function generates a random number result result that follows a Chi-Square distribution with df df degrees of freedom. The probability density function (pdf) for the Chi-Square distribution is: f(x; df) = \\frac{x^{(df/2 - 1)} e^{-x/2}}{2^{df/2} \\Gamma(df/2)} \\quad \\text{for } x \\geq 0, df > 0 f(x; df) = \\frac{x^{(df/2 - 1)} e^{-x/2}}{2^{df/2} \\Gamma(df/2)} \\quad \\text{for } x \\geq 0, df > 0 In this implementation, the Chi-Square distribution is generated using the gamma distribution: \\text{result} = \\text{GenerateGamma}(df / 2, 0.5) \\text{result} = \\text{GenerateGamma}(df / 2, 0.5)","title":"Mathematical Background"},{"location":"generateExponential/","text":"generateExponential(lambda) Overview The generateExponential(lambda) function generates a random number that follows an Exponential distribution. Parameters Parameter Type Description lambda Number The rate parameter of the Exponential distribution. Returns Return Type Description x Number A random number from an Exponential distribution. Example local x = StatBook.generateExponential(0.5) print(x) -- Output will vary Mathematical Background The function generates a random number x x that follows an Exponential distribution with rate parameter \\lambda \\lambda . The Exponential distribution is often used to model the time between events in a Poisson process. To generate x x , the function uses the following formula: x = -\\frac{\\ln(1 - U)}{\\lambda} x = -\\frac{\\ln(1 - U)}{\\lambda} where U U is a uniformly distributed random number between 0 and 1. The \\ln \\ln function represents the natural logarithm, and \\lambda \\lambda is the rate parameter, which should be greater than zero. x = \\frac{d \\times v}{\\beta} ] where d = \\alpha - \\frac{1}{3} d = \\alpha - \\frac{1}{3} , v = (1 + c \\times Z)^{3} v = (1 + c \\times Z)^{3} , and c = \\frac{1}{\\sqrt{9 \\times d}} c = \\frac{1}{\\sqrt{9 \\times d}} . The reciprocal of x x from the Gamma distribution is then taken to generate the Inverse Gamma distributed number.","title":"generateExponential"},{"location":"generateExponential/#generateexponentiallambda","text":"","title":"generateExponential(lambda)"},{"location":"generateExponential/#overview","text":"The generateExponential(lambda) function generates a random number that follows an Exponential distribution.","title":"Overview"},{"location":"generateExponential/#parameters","text":"Parameter Type Description lambda Number The rate parameter of the Exponential distribution.","title":"Parameters"},{"location":"generateExponential/#returns","text":"Return Type Description x Number A random number from an Exponential distribution.","title":"Returns"},{"location":"generateExponential/#example","text":"local x = StatBook.generateExponential(0.5) print(x) -- Output will vary","title":"Example"},{"location":"generateExponential/#mathematical-background","text":"The function generates a random number x x that follows an Exponential distribution with rate parameter \\lambda \\lambda . The Exponential distribution is often used to model the time between events in a Poisson process. To generate x x , the function uses the following formula: x = -\\frac{\\ln(1 - U)}{\\lambda} x = -\\frac{\\ln(1 - U)}{\\lambda} where U U is a uniformly distributed random number between 0 and 1. The \\ln \\ln function represents the natural logarithm, and \\lambda \\lambda is the rate parameter, which should be greater than zero. x = \\frac{d \\times v}{\\beta} ] where d = \\alpha - \\frac{1}{3} d = \\alpha - \\frac{1}{3} , v = (1 + c \\times Z)^{3} v = (1 + c \\times Z)^{3} , and c = \\frac{1}{\\sqrt{9 \\times d}} c = \\frac{1}{\\sqrt{9 \\times d}} . The reciprocal of x x from the Gamma distribution is then taken to generate the Inverse Gamma distributed number.","title":"Mathematical Background"},{"location":"generateExponentialScaled/","text":"generateExponentialScaled(lambda, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile) Overview The function generates a scaled random number based on an Exponential distribution with a specified rate parameter ( \\lambda \\lambda ) within the desired range. Parameters Parameter Type Description lambda Number The rate parameter of the Exponential distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided. Returns Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] . Example local random = StatBook.generateExponentialScaled(1, 0, 10) print(random) -- Output will vary Mathematical Background The function generates a random number x x that follows an Exponential distribution and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"generateExponentialScaled"},{"location":"generateExponentialScaled/#generateexponentialscaledlambda-desiredmin-desiredmax-lqpercent-uqpercent-lowerquantile-upperquantile","text":"","title":"generateExponentialScaled(lambda, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile)"},{"location":"generateExponentialScaled/#overview","text":"The function generates a scaled random number based on an Exponential distribution with a specified rate parameter ( \\lambda \\lambda ) within the desired range.","title":"Overview"},{"location":"generateExponentialScaled/#parameters","text":"Parameter Type Description lambda Number The rate parameter of the Exponential distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided.","title":"Parameters"},{"location":"generateExponentialScaled/#returns","text":"Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] .","title":"Returns"},{"location":"generateExponentialScaled/#example","text":"local random = StatBook.generateExponentialScaled(1, 0, 10) print(random) -- Output will vary","title":"Example"},{"location":"generateExponentialScaled/#mathematical-background","text":"The function generates a random number x x that follows an Exponential distribution and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"Mathematical Background"},{"location":"generateGamma/","text":"generateGamma(alpha, beta) Overview The generateGamma(alpha, beta) function generates a random number that follows a Gamma distribution with the given shape parameter \\alpha \\alpha and scale parameter \\beta \\beta . The function uses the Marsaglia and Tsang method for this purpose. Parameters Parameter Type Description Default alpha Number The shape parameter of the Gamma distribution. - beta Number The scale parameter of the Gamma distribution. - Returns Return Type Description x Number A random number from a Gamma distribution with parameters \\alpha \\alpha and \\beta \\beta . Example local alpha = 2 local beta = 1 local x = StatBook.generateGamma(alpha, beta) print(x) -- Output will vary Mathematical Background The function utilizes the Marsaglia and Tsang method to generate a random number x x that follows a Gamma distribution with shape parameter \\alpha \\alpha and scale parameter \\beta \\beta . For \\alpha < 1 \\alpha < 1 , the function uses a recursive approach to find x x such that: [ x = \\text{GenerateGamma}(\\alpha + 1, \\beta) \\times u ^ {\\frac{1}{\\alpha}} ] Where u u is a uniformly distributed random number between 0 and 1. For \\alpha \\geq 1 \\alpha \\geq 1 , the function uses a while loop to generate x x as: [ x = \\frac{d \\times v}{\\beta} ] Where d = \\alpha - \\frac{1}{3} d = \\alpha - \\frac{1}{3} and v v is calculated using a standard normally distributed random number Z Z generated by Box-Muller transform as: [ v = (1 + c \\times Z)^3 ] And c = \\frac{1}{\\sqrt{9 \\times d}} c = \\frac{1}{\\sqrt{9 \\times d}} . The function repeats this process until a suitable x x is found.","title":"generateGamma"},{"location":"generateGamma/#generategammaalpha-beta","text":"","title":"generateGamma(alpha, beta)"},{"location":"generateGamma/#overview","text":"The generateGamma(alpha, beta) function generates a random number that follows a Gamma distribution with the given shape parameter \\alpha \\alpha and scale parameter \\beta \\beta . The function uses the Marsaglia and Tsang method for this purpose.","title":"Overview"},{"location":"generateGamma/#parameters","text":"Parameter Type Description Default alpha Number The shape parameter of the Gamma distribution. - beta Number The scale parameter of the Gamma distribution. -","title":"Parameters"},{"location":"generateGamma/#returns","text":"Return Type Description x Number A random number from a Gamma distribution with parameters \\alpha \\alpha and \\beta \\beta .","title":"Returns"},{"location":"generateGamma/#example","text":"local alpha = 2 local beta = 1 local x = StatBook.generateGamma(alpha, beta) print(x) -- Output will vary","title":"Example"},{"location":"generateGamma/#mathematical-background","text":"The function utilizes the Marsaglia and Tsang method to generate a random number x x that follows a Gamma distribution with shape parameter \\alpha \\alpha and scale parameter \\beta \\beta . For \\alpha < 1 \\alpha < 1 , the function uses a recursive approach to find x x such that: [ x = \\text{GenerateGamma}(\\alpha + 1, \\beta) \\times u ^ {\\frac{1}{\\alpha}} ] Where u u is a uniformly distributed random number between 0 and 1. For \\alpha \\geq 1 \\alpha \\geq 1 , the function uses a while loop to generate x x as: [ x = \\frac{d \\times v}{\\beta} ] Where d = \\alpha - \\frac{1}{3} d = \\alpha - \\frac{1}{3} and v v is calculated using a standard normally distributed random number Z Z generated by Box-Muller transform as: [ v = (1 + c \\times Z)^3 ] And c = \\frac{1}{\\sqrt{9 \\times d}} c = \\frac{1}{\\sqrt{9 \\times d}} . The function repeats this process until a suitable x x is found.","title":"Mathematical Background"},{"location":"generateGammaScaled/","text":"generateGammaScaled(alpha, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile) Overview The function generates a scaled random number based on a Gamma distribution with a specified shape parameter (\\( \\alpha \\)) within the desired range. Parameters Parameter Type Description alpha Number The shape parameter of the Gamma distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided. Returns Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] . Example local random = StatBook.generateGammaScaled(2, 0, 10) print(random) -- Output will vary Mathematical Background The function generates a random number \\( x \\) that follows a Gamma distribution and then scales it to the desired range. The formula used for scaling is: \\[ \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\] Where scaleToDesiredRange is a function that takes the random number \\( x \\), lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"generateGammaScaled"},{"location":"generateGammaScaled/#generategammascaledalpha-desiredmin-desiredmax-lqpercent-uqpercent-lowerquantile-upperquantile","text":"","title":"generateGammaScaled(alpha, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile)"},{"location":"generateGammaScaled/#overview","text":"The function generates a scaled random number based on a Gamma distribution with a specified shape parameter (\\( \\alpha \\)) within the desired range.","title":"Overview"},{"location":"generateGammaScaled/#parameters","text":"Parameter Type Description alpha Number The shape parameter of the Gamma distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided.","title":"Parameters"},{"location":"generateGammaScaled/#returns","text":"Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] .","title":"Returns"},{"location":"generateGammaScaled/#example","text":"local random = StatBook.generateGammaScaled(2, 0, 10) print(random) -- Output will vary","title":"Example"},{"location":"generateGammaScaled/#mathematical-background","text":"The function generates a random number \\( x \\) that follows a Gamma distribution and then scales it to the desired range. The formula used for scaling is: \\[ \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\] Where scaleToDesiredRange is a function that takes the random number \\( x \\), lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"Mathematical Background"},{"location":"generateInverseGamma/","text":"generateInverseGamma(alpha, beta) Overview The generateInverseGamma(alpha, beta) function generates a random number that follows an Inverse Gamma distribution using the Marsaglia and Tsang method for Gamma distribution and then taking the reciprocal. Parameters Parameter Type Description alpha Number The shape parameter of the Inverse Gamma distribution. beta Number The scale parameter of the Inverse Gamma distribution. Returns Return Type Description x Number A random number from an Inverse Gamma distribution. Example local x = StatBook.generateInverseGamma(2, 1) print(x) -- Output will vary Mathematical Background The function uses the Marsaglia and Tsang method to generate a random number x x that follows a Gamma distribution with shape parameter \\alpha \\alpha and scale parameter \\beta \\beta . It then takes the reciprocal of this number to generate a value from an Inverse Gamma distribution. For \\alpha < 1 \\alpha < 1 , the function uses a recursive approach to find x x for the Gamma distribution: x = \\text{GenerateGamma}(\\alpha + 1, \\beta) \\times u^{(1 / \\alpha)} x = \\text{GenerateGamma}(\\alpha + 1, \\beta) \\times u^{(1 / \\alpha)} where u u is a uniformly distributed random number between 0 and 1. For \\alpha \\geq 1 \\alpha \\geq 1 , x x for the Gamma distribution is calculated using the formula: x = \\frac{d \\times v}{\\beta} x = \\frac{d \\times v}{\\beta} where d = \\alpha - \\frac{1}{3} d = \\alpha - \\frac{1}{3} , v = (1 + c \\times Z)^{3} v = (1 + c \\times Z)^{3} , and c = \\frac{1}{\\sqrt{9 \\times d}} c = \\frac{1}{\\sqrt{9 \\times d}} . The reciprocal of x x from the Gamma distribution is then taken to generate the Inverse Gamma distributed number.","title":"generateInverseGamma"},{"location":"generateInverseGamma/#generateinversegammaalpha-beta","text":"","title":"generateInverseGamma(alpha, beta)"},{"location":"generateInverseGamma/#overview","text":"The generateInverseGamma(alpha, beta) function generates a random number that follows an Inverse Gamma distribution using the Marsaglia and Tsang method for Gamma distribution and then taking the reciprocal.","title":"Overview"},{"location":"generateInverseGamma/#parameters","text":"Parameter Type Description alpha Number The shape parameter of the Inverse Gamma distribution. beta Number The scale parameter of the Inverse Gamma distribution.","title":"Parameters"},{"location":"generateInverseGamma/#returns","text":"Return Type Description x Number A random number from an Inverse Gamma distribution.","title":"Returns"},{"location":"generateInverseGamma/#example","text":"local x = StatBook.generateInverseGamma(2, 1) print(x) -- Output will vary","title":"Example"},{"location":"generateInverseGamma/#mathematical-background","text":"The function uses the Marsaglia and Tsang method to generate a random number x x that follows a Gamma distribution with shape parameter \\alpha \\alpha and scale parameter \\beta \\beta . It then takes the reciprocal of this number to generate a value from an Inverse Gamma distribution. For \\alpha < 1 \\alpha < 1 , the function uses a recursive approach to find x x for the Gamma distribution: x = \\text{GenerateGamma}(\\alpha + 1, \\beta) \\times u^{(1 / \\alpha)} x = \\text{GenerateGamma}(\\alpha + 1, \\beta) \\times u^{(1 / \\alpha)} where u u is a uniformly distributed random number between 0 and 1. For \\alpha \\geq 1 \\alpha \\geq 1 , x x for the Gamma distribution is calculated using the formula: x = \\frac{d \\times v}{\\beta} x = \\frac{d \\times v}{\\beta} where d = \\alpha - \\frac{1}{3} d = \\alpha - \\frac{1}{3} , v = (1 + c \\times Z)^{3} v = (1 + c \\times Z)^{3} , and c = \\frac{1}{\\sqrt{9 \\times d}} c = \\frac{1}{\\sqrt{9 \\times d}} . The reciprocal of x x from the Gamma distribution is then taken to generate the Inverse Gamma distributed number.","title":"Mathematical Background"},{"location":"generateLevy/","text":"generateLevy(c, mu) Overview The generateLevy(c, mu) function generates a random number that follows a L\u00e9vy distribution. Parameters Parameter Type Description c Number The scale parameter for the L\u00e9vy distribution. Must be greater than 0. mu Number The location parameter for the L\u00e9vy distribution. Returns Return Type Description result Number A random number from a L\u00e9vy distribution. Example local result = StatBook.generateLevy(1, 0) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a L\u00e9vy distribution with scale parameter c c and location parameter \\mu \\mu . The probability density function (pdf) of the L\u00e9vy distribution is defined as: f(x; c, \\mu) = \\sqrt{\\frac{c}{2\\pi}} \\frac{e^{-\\frac{c}{2(x - \\mu)}}}{(x - \\mu)^{3/2}} f(x; c, \\mu) = \\sqrt{\\frac{c}{2\\pi}} \\frac{e^{-\\frac{c}{2(x - \\mu)}}}{(x - \\mu)^{3/2}} The function uses the Inverse Error Function to generate a random variable that follows the L\u00e9vy distribution: result = \\frac{c}{(\\sqrt{2} \\times \\text{InverseErrorFunction}(2 \\times (1 - \\text{math.random}/2) - 1))^2} + \\mu result = \\frac{c}{(\\sqrt{2} \\times \\text{InverseErrorFunction}(2 \\times (1 - \\text{math.random}/2) - 1))^2} + \\mu","title":"generateLevy"},{"location":"generateLevy/#generatelevyc-mu","text":"","title":"generateLevy(c, mu)"},{"location":"generateLevy/#overview","text":"The generateLevy(c, mu) function generates a random number that follows a L\u00e9vy distribution.","title":"Overview"},{"location":"generateLevy/#parameters","text":"Parameter Type Description c Number The scale parameter for the L\u00e9vy distribution. Must be greater than 0. mu Number The location parameter for the L\u00e9vy distribution.","title":"Parameters"},{"location":"generateLevy/#returns","text":"Return Type Description result Number A random number from a L\u00e9vy distribution.","title":"Returns"},{"location":"generateLevy/#example","text":"local result = StatBook.generateLevy(1, 0) print(result) -- Output will vary","title":"Example"},{"location":"generateLevy/#mathematical-background","text":"The function generates a random number result result that follows a L\u00e9vy distribution with scale parameter c c and location parameter \\mu \\mu . The probability density function (pdf) of the L\u00e9vy distribution is defined as: f(x; c, \\mu) = \\sqrt{\\frac{c}{2\\pi}} \\frac{e^{-\\frac{c}{2(x - \\mu)}}}{(x - \\mu)^{3/2}} f(x; c, \\mu) = \\sqrt{\\frac{c}{2\\pi}} \\frac{e^{-\\frac{c}{2(x - \\mu)}}}{(x - \\mu)^{3/2}} The function uses the Inverse Error Function to generate a random variable that follows the L\u00e9vy distribution: result = \\frac{c}{(\\sqrt{2} \\times \\text{InverseErrorFunction}(2 \\times (1 - \\text{math.random}/2) - 1))^2} + \\mu result = \\frac{c}{(\\sqrt{2} \\times \\text{InverseErrorFunction}(2 \\times (1 - \\text{math.random}/2) - 1))^2} + \\mu","title":"Mathematical Background"},{"location":"generateLogNormal/","text":"generateLogNormal(mu, sigma) Overview The generateLogNormal(mu, sigma) function generates a random number that follows a log-normal distribution. Parameters Parameter Type Description mu Number The mean parameter of the underlying normal distribution. sigma Number The standard deviation parameter of the underlying normal distribution. Returns Return Type Description result Number A random number from a log-normal distribution. Example local result = StatBook.generateLogNormal(0, 1) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a log-normal distribution with parameters \\mu \\mu and \\sigma \\sigma . A log-normal distribution is useful in various applications, including finance and ecology, where the values must be positive. To generate result result , the function uses the Box-Muller method to generate a standard normally distributed random variable Z Z . The function then calculates result result using: result = \\exp(\\mu + \\sigma \\times Z) result = \\exp(\\mu + \\sigma \\times Z)","title":"generateLogNormal"},{"location":"generateLogNormal/#generatelognormalmu-sigma","text":"","title":"generateLogNormal(mu, sigma)"},{"location":"generateLogNormal/#overview","text":"The generateLogNormal(mu, sigma) function generates a random number that follows a log-normal distribution.","title":"Overview"},{"location":"generateLogNormal/#parameters","text":"Parameter Type Description mu Number The mean parameter of the underlying normal distribution. sigma Number The standard deviation parameter of the underlying normal distribution.","title":"Parameters"},{"location":"generateLogNormal/#returns","text":"Return Type Description result Number A random number from a log-normal distribution.","title":"Returns"},{"location":"generateLogNormal/#example","text":"local result = StatBook.generateLogNormal(0, 1) print(result) -- Output will vary","title":"Example"},{"location":"generateLogNormal/#mathematical-background","text":"The function generates a random number result result that follows a log-normal distribution with parameters \\mu \\mu and \\sigma \\sigma . A log-normal distribution is useful in various applications, including finance and ecology, where the values must be positive. To generate result result , the function uses the Box-Muller method to generate a standard normally distributed random variable Z Z . The function then calculates result result using: result = \\exp(\\mu + \\sigma \\times Z) result = \\exp(\\mu + \\sigma \\times Z)","title":"Mathematical Background"},{"location":"generateLogNormalScaled/","text":"generateLogNormalScaled(mu, sigma, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile) Overview The generateLogNormalScaled() function generates a scaled random number based on a log-normal distribution with a specified mean ( \\mu \\mu ) and standard deviation ( \\sigma \\sigma ) within the desired range. Parameters Parameter Type Description mu Number The mean of the log-normal distribution. sigma Number The standard deviation of the log-normal distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided. Returns Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] . Example local random = StatBook.generateLogNormalScaled(0, 1, 1, 100) print(random) -- Output will vary Mathematical Background The function generates a random number x x that follows a log-normal distribution and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"generateLogNormalScaled"},{"location":"generateLogNormalScaled/#generatelognormalscaledmu-sigma-desiredmin-desiredmax-lqpercent-uqpercent-lowerquantile-upperquantile","text":"","title":"generateLogNormalScaled(mu, sigma, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile)"},{"location":"generateLogNormalScaled/#overview","text":"The generateLogNormalScaled() function generates a scaled random number based on a log-normal distribution with a specified mean ( \\mu \\mu ) and standard deviation ( \\sigma \\sigma ) within the desired range.","title":"Overview"},{"location":"generateLogNormalScaled/#parameters","text":"Parameter Type Description mu Number The mean of the log-normal distribution. sigma Number The standard deviation of the log-normal distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided.","title":"Parameters"},{"location":"generateLogNormalScaled/#returns","text":"Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] .","title":"Returns"},{"location":"generateLogNormalScaled/#example","text":"local random = StatBook.generateLogNormalScaled(0, 1, 1, 100) print(random) -- Output will vary","title":"Example"},{"location":"generateLogNormalScaled/#mathematical-background","text":"The function generates a random number x x that follows a log-normal distribution and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"Mathematical Background"},{"location":"generateNormal/","text":"generateNormal(mu, sigma) Overview The generateNormal function generates a random number following a normal distribution characterized by a given mean ( mu ) and standard deviation ( sigma ). Parameters Parameter Type Description Default mu Number The mean of the normal distribution. - sigma Number The standard deviation of the normal distribution. - Returns Return Type Description x Number A random number following the specified normal distribution. Example local mu = 0 local sigma = 1 local randomNum = StatBook.generateNormal(mu, sigma) print(randomNum) -- Output will vary based on random generation Mathematical Background The function uses the Box-Muller transform to generate a normally distributed random number x x , given a mean \\mu \\mu and standard deviation \\sigma \\sigma . Given two independent and uniformly distributed random numbers U_1 U_1 and U_2 U_2 , the Box-Muller transform generates a standard normally distributed random variable Z Z : Z = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) Z = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) To adapt this to a general normal distribution with mean \\mu \\mu and standard deviation \\sigma \\sigma , the function performs the following transformation: x = \\mu + \\sigma \\times Z x = \\mu + \\sigma \\times Z","title":"generateNormal"},{"location":"generateNormal/#generatenormalmu-sigma","text":"","title":"generateNormal(mu, sigma)"},{"location":"generateNormal/#overview","text":"The generateNormal function generates a random number following a normal distribution characterized by a given mean ( mu ) and standard deviation ( sigma ).","title":"Overview"},{"location":"generateNormal/#parameters","text":"Parameter Type Description Default mu Number The mean of the normal distribution. - sigma Number The standard deviation of the normal distribution. -","title":"Parameters"},{"location":"generateNormal/#returns","text":"Return Type Description x Number A random number following the specified normal distribution.","title":"Returns"},{"location":"generateNormal/#example","text":"local mu = 0 local sigma = 1 local randomNum = StatBook.generateNormal(mu, sigma) print(randomNum) -- Output will vary based on random generation","title":"Example"},{"location":"generateNormal/#mathematical-background","text":"The function uses the Box-Muller transform to generate a normally distributed random number x x , given a mean \\mu \\mu and standard deviation \\sigma \\sigma . Given two independent and uniformly distributed random numbers U_1 U_1 and U_2 U_2 , the Box-Muller transform generates a standard normally distributed random variable Z Z : Z = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) Z = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) To adapt this to a general normal distribution with mean \\mu \\mu and standard deviation \\sigma \\sigma , the function performs the following transformation: x = \\mu + \\sigma \\times Z x = \\mu + \\sigma \\times Z","title":"Mathematical Background"},{"location":"generateNormalScaled/","text":"generateNormalScaled(mu, sigma, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile) Overview The generateNormalScaled() function generates a scaled random number based on a normal distribution with a specified mean ( \\mu \\mu ) and standard deviation ( \\sigma \\sigma ) within the desired range. Parameters Parameter Type Description mu Number The mean of the normal distribution. sigma Number The standard deviation of the normal distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0.001. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided. Returns Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] . Example local random = StatBook.generateNormalScaled(0, 1, -10, 10) print(random) -- Output will vary Mathematical Background The function generates a random number x x that follows a normal distribution N(\\mu, \\sigma^2) N(\\mu, \\sigma^2) and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"generateNormalScaled"},{"location":"generateNormalScaled/#generatenormalscaledmu-sigma-desiredmin-desiredmax-lqpercent-uqpercent-lowerquantile-upperquantile","text":"","title":"generateNormalScaled(mu, sigma, desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile)"},{"location":"generateNormalScaled/#overview","text":"The generateNormalScaled() function generates a scaled random number based on a normal distribution with a specified mean ( \\mu \\mu ) and standard deviation ( \\sigma \\sigma ) within the desired range.","title":"Overview"},{"location":"generateNormalScaled/#parameters","text":"Parameter Type Description mu Number The mean of the normal distribution. sigma Number The standard deviation of the normal distribution. desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0.001. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided.","title":"Parameters"},{"location":"generateNormalScaled/#returns","text":"Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] .","title":"Returns"},{"location":"generateNormalScaled/#example","text":"local random = StatBook.generateNormalScaled(0, 1, -10, 10) print(random) -- Output will vary","title":"Example"},{"location":"generateNormalScaled/#mathematical-background","text":"The function generates a random number x x that follows a normal distribution N(\\mu, \\sigma^2) N(\\mu, \\sigma^2) and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"Mathematical Background"},{"location":"generatePareto/","text":"generatePareto(alpha, xm) Overview The generatePareto(alpha, xm) function generates a random number that follows a Pareto distribution with shape parameter alpha and scale parameter xm . Parameters Parameter Type Description alpha Number The shape parameter for the Pareto distribution. xm Number The scale parameter for the Pareto distribution. Returns Return Type Description result Number A random number from a Pareto distribution. Example local result = StatBook.generatePareto(2, 1) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a Pareto distribution with shape parameter \\alpha \\alpha and scale parameter xm xm . The probability density function (pdf) for the Pareto distribution is: f(x; \\alpha, xm) = \\alpha xm^\\alpha x^{-(\\alpha + 1)} \\quad \\text{for } x \\geq xm, \\alpha > 0 f(x; \\alpha, xm) = \\alpha xm^\\alpha x^{-(\\alpha + 1)} \\quad \\text{for } x \\geq xm, \\alpha > 0 In this implementation, the Pareto distribution is generated using the formula: \\text{result} = xm \\times (1 - \\text{random})^{-\\frac{1}{\\alpha}} \\text{result} = xm \\times (1 - \\text{random})^{-\\frac{1}{\\alpha}}","title":"generatePareto"},{"location":"generatePareto/#generateparetoalpha-xm","text":"","title":"generatePareto(alpha, xm)"},{"location":"generatePareto/#overview","text":"The generatePareto(alpha, xm) function generates a random number that follows a Pareto distribution with shape parameter alpha and scale parameter xm .","title":"Overview"},{"location":"generatePareto/#parameters","text":"Parameter Type Description alpha Number The shape parameter for the Pareto distribution. xm Number The scale parameter for the Pareto distribution.","title":"Parameters"},{"location":"generatePareto/#returns","text":"Return Type Description result Number A random number from a Pareto distribution.","title":"Returns"},{"location":"generatePareto/#example","text":"local result = StatBook.generatePareto(2, 1) print(result) -- Output will vary","title":"Example"},{"location":"generatePareto/#mathematical-background","text":"The function generates a random number result result that follows a Pareto distribution with shape parameter \\alpha \\alpha and scale parameter xm xm . The probability density function (pdf) for the Pareto distribution is: f(x; \\alpha, xm) = \\alpha xm^\\alpha x^{-(\\alpha + 1)} \\quad \\text{for } x \\geq xm, \\alpha > 0 f(x; \\alpha, xm) = \\alpha xm^\\alpha x^{-(\\alpha + 1)} \\quad \\text{for } x \\geq xm, \\alpha > 0 In this implementation, the Pareto distribution is generated using the formula: \\text{result} = xm \\times (1 - \\text{random})^{-\\frac{1}{\\alpha}} \\text{result} = xm \\times (1 - \\text{random})^{-\\frac{1}{\\alpha}}","title":"Mathematical Background"},{"location":"generatePoisson/","text":"generatePoisson(lambda) Overview The generatePoisson(lambda) function generates a random number that follows a Poisson distribution. Parameters Parameter Type Description lambda Number The average rate of events per interval for the Poisson distribution. Must be greater than 0. Returns Return Type Description result Number A random number from a Poisson distribution. Example local result = StatBook.generatePoisson(5) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a Poisson distribution with parameter \\lambda \\lambda . The probability mass function (pmf) of the Poisson distribution is defined as: P(X=k) = \\frac{\\lambda^k e^{-\\lambda}}{k!} P(X=k) = \\frac{\\lambda^k e^{-\\lambda}}{k!} In this implementation, the algorithm uses a method based on direct simulation. It initializes a loop with p = 1 p = 1 and multiplies p p by a random number between 0 and 1 until p p is less than or equal to e^{-\\lambda} e^{-\\lambda} . The number of iterations minus 1 gives the random variable from the Poisson distribution. \\text{result} = k - 1 \\text{result} = k - 1","title":"generatePoisson"},{"location":"generatePoisson/#generatepoissonlambda","text":"","title":"generatePoisson(lambda)"},{"location":"generatePoisson/#overview","text":"The generatePoisson(lambda) function generates a random number that follows a Poisson distribution.","title":"Overview"},{"location":"generatePoisson/#parameters","text":"Parameter Type Description lambda Number The average rate of events per interval for the Poisson distribution. Must be greater than 0.","title":"Parameters"},{"location":"generatePoisson/#returns","text":"Return Type Description result Number A random number from a Poisson distribution.","title":"Returns"},{"location":"generatePoisson/#example","text":"local result = StatBook.generatePoisson(5) print(result) -- Output will vary","title":"Example"},{"location":"generatePoisson/#mathematical-background","text":"The function generates a random number result result that follows a Poisson distribution with parameter \\lambda \\lambda . The probability mass function (pmf) of the Poisson distribution is defined as: P(X=k) = \\frac{\\lambda^k e^{-\\lambda}}{k!} P(X=k) = \\frac{\\lambda^k e^{-\\lambda}}{k!} In this implementation, the algorithm uses a method based on direct simulation. It initializes a loop with p = 1 p = 1 and multiplies p p by a random number between 0 and 1 until p p is less than or equal to e^{-\\lambda} e^{-\\lambda} . The number of iterations minus 1 gives the random variable from the Poisson distribution. \\text{result} = k - 1 \\text{result} = k - 1","title":"Mathematical Background"},{"location":"generateStandardNormal/","text":"generateStandardNormal() Overview The generateStandardNormal() function generates a random number that follows a standard normal distribution using the Box-Muller transform. Parameters No parameters are required. Returns Return Type Description x Number A random number from a standard normal distribution. Example local x = StatBook.generateStandardNormal() print(x) -- Output will vary Mathematical Background The function internally utilizes the Box-Muller transform to generate a random number x x that follows a standard normal distribution. This distribution has a mean of 0 and a standard deviation of 1. The Box-Muller transform generates two independent standard normally distributed normal variables, Z_0 Z_0 and Z_1 Z_1 , from two uniformly distributed random variables U_1 U_1 and U_2 U_2 . Z_0 = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) Z_0 = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) Z_1 = \\sqrt{-2 \\ln(U_1)} \\sin(2\\pi U_2) Z_1 = \\sqrt{-2 \\ln(U_1)} \\sin(2\\pi U_2) In this function, either Z_0 Z_0 or Z_1 Z_1 is returned as x x .","title":"generateStandardNormal"},{"location":"generateStandardNormal/#generatestandardnormal","text":"","title":"generateStandardNormal()"},{"location":"generateStandardNormal/#overview","text":"The generateStandardNormal() function generates a random number that follows a standard normal distribution using the Box-Muller transform.","title":"Overview"},{"location":"generateStandardNormal/#parameters","text":"No parameters are required.","title":"Parameters"},{"location":"generateStandardNormal/#returns","text":"Return Type Description x Number A random number from a standard normal distribution.","title":"Returns"},{"location":"generateStandardNormal/#example","text":"local x = StatBook.generateStandardNormal() print(x) -- Output will vary","title":"Example"},{"location":"generateStandardNormal/#mathematical-background","text":"The function internally utilizes the Box-Muller transform to generate a random number x x that follows a standard normal distribution. This distribution has a mean of 0 and a standard deviation of 1. The Box-Muller transform generates two independent standard normally distributed normal variables, Z_0 Z_0 and Z_1 Z_1 , from two uniformly distributed random variables U_1 U_1 and U_2 U_2 . Z_0 = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) Z_0 = \\sqrt{-2 \\ln(U_1)} \\cos(2\\pi U_2) Z_1 = \\sqrt{-2 \\ln(U_1)} \\sin(2\\pi U_2) Z_1 = \\sqrt{-2 \\ln(U_1)} \\sin(2\\pi U_2) In this function, either Z_0 Z_0 or Z_1 Z_1 is returned as x x .","title":"Mathematical Background"},{"location":"generateStandardNormalScaled/","text":"generateStandardNormalScaled(desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile) Overview The generateStandardNormalScaled() function generates a scaled random number based on the standard normal distribution within the specified range. Parameters Parameter Type Description desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0.001. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided. Returns Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] . Example local random = StatBook.generateStandardNormalScaled(-10, 10) print(random) -- Value between -10 and 10 Mathematical Background The function generates a random number x x that follows a standard normal distribution and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"generateStandardNormalScaled"},{"location":"generateStandardNormalScaled/#generatestandardnormalscaleddesiredmin-desiredmax-lqpercent-uqpercent-lowerquantile-upperquantile","text":"","title":"generateStandardNormalScaled(desiredMin, desiredMax, LQpercent, UQpercent, lowerQuantile, upperQuantile)"},{"location":"generateStandardNormalScaled/#overview","text":"The generateStandardNormalScaled() function generates a scaled random number based on the standard normal distribution within the specified range.","title":"Overview"},{"location":"generateStandardNormalScaled/#parameters","text":"Parameter Type Description desiredMin Number The minimum desired value of the scaled random number. desiredMax Number The maximum desired value of the scaled random number. LQpercent Number Lower quantile percentage. Default is 0.001. UQpercent Number Upper quantile percentage. Default is 0.999. lowerQuantile Number Lower quantile value. Calculated by default if not provided. upperQuantile Number Upper quantile value. Calculated by default if not provided.","title":"Parameters"},{"location":"generateStandardNormalScaled/#returns","text":"Return Type Description random Number A scaled random number in the range [desiredMin, desiredMax] .","title":"Returns"},{"location":"generateStandardNormalScaled/#example","text":"local random = StatBook.generateStandardNormalScaled(-10, 10) print(random) -- Value between -10 and 10","title":"Example"},{"location":"generateStandardNormalScaled/#mathematical-background","text":"The function generates a random number x x that follows a standard normal distribution and then scales it to the desired range. The formula used for scaling is: \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) \\text{random} = \\text{scaleToDesiredRange}(x, \\text{lowerQuantile}, \\text{upperQuantile}, \\text{desiredMin}, \\text{desiredMax}) Where scaleToDesiredRange is a function that takes the random number x x , lower and upper quantile values, and desired minimum and maximum values as arguments, and returns a scaled value that falls within [desiredMin, desiredMax] .","title":"Mathematical Background"},{"location":"generateT/","text":"generateT(df) Overview The generateT(df) function generates a random number that follows a Student's t-distribution with df degrees of freedom. Parameters Parameter Type Description df Number The degrees of freedom for the t-distribution. Returns Return Type Description result Number A random number from a Student's t-distribution. Example local result = StatBook.generateT(10) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a Student's t-distribution with df df degrees of freedom. The probability density function (pdf) for the Student's t-distribution is: f(t; df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{df \\pi} \\Gamma(\\frac{df}{2})} \\left(1 + \\frac{t^2}{df} \\right)^{-\\frac{df + 1}{2}} f(t; df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{df \\pi} \\Gamma(\\frac{df}{2})} \\left(1 + \\frac{t^2}{df} \\right)^{-\\frac{df + 1}{2}} In this implementation, the Student's t-distribution is generated using the formula: \\text{result} = \\frac{x}{\\sqrt{y / df}} \\text{result} = \\frac{x}{\\sqrt{y / df}} Where x x is a random number from a standard normal distribution and y y is a random number from a chi-square distribution with df df degrees of freedom.","title":"generateT"},{"location":"generateT/#generatetdf","text":"","title":"generateT(df)"},{"location":"generateT/#overview","text":"The generateT(df) function generates a random number that follows a Student's t-distribution with df degrees of freedom.","title":"Overview"},{"location":"generateT/#parameters","text":"Parameter Type Description df Number The degrees of freedom for the t-distribution.","title":"Parameters"},{"location":"generateT/#returns","text":"Return Type Description result Number A random number from a Student's t-distribution.","title":"Returns"},{"location":"generateT/#example","text":"local result = StatBook.generateT(10) print(result) -- Output will vary","title":"Example"},{"location":"generateT/#mathematical-background","text":"The function generates a random number result result that follows a Student's t-distribution with df df degrees of freedom. The probability density function (pdf) for the Student's t-distribution is: f(t; df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{df \\pi} \\Gamma(\\frac{df}{2})} \\left(1 + \\frac{t^2}{df} \\right)^{-\\frac{df + 1}{2}} f(t; df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{df \\pi} \\Gamma(\\frac{df}{2})} \\left(1 + \\frac{t^2}{df} \\right)^{-\\frac{df + 1}{2}} In this implementation, the Student's t-distribution is generated using the formula: \\text{result} = \\frac{x}{\\sqrt{y / df}} \\text{result} = \\frac{x}{\\sqrt{y / df}} Where x x is a random number from a standard normal distribution and y y is a random number from a chi-square distribution with df df degrees of freedom.","title":"Mathematical Background"},{"location":"generateWeibull/","text":"generateWeibull(alpha, beta) Overview The generateWeibull(alpha, beta) function generates a random number that follows a Weibull distribution. Parameters Parameter Type Description alpha Number The scale parameter of the Weibull distribution. beta Number The shape parameter of the Weibull distribution. Returns Return Type Description result Number A random number from a Weibull distribution. Example local result = StatBook.generateWeibull(1, 2) print(result) -- Output will vary Mathematical Background The function generates a random number result result that follows a Weibull distribution with scale parameter \\alpha \\alpha and shape parameter \\beta \\beta . The probability density function (pdf) of the Weibull distribution is defined as: f(x; \\alpha, \\beta) = \\beta \\alpha x^{\\beta - 1} e^{-\\alpha x^\\beta} \\quad \\text{for } x \\geq 0, \\alpha > 0, \\beta > 0 f(x; \\alpha, \\beta) = \\beta \\alpha x^{\\beta - 1} e^{-\\alpha x^\\beta} \\quad \\text{for } x \\geq 0, \\alpha > 0, \\beta > 0 In this implementation, the random variable from the Weibull distribution is generated using the formula: \\text{result} = \\alpha (-\\ln(1 - U))^{1/\\beta} \\text{result} = \\alpha (-\\ln(1 - U))^{1/\\beta} where U U is a uniformly distributed random number between 0 and 1, excluding 0 and 1.","title":"generateWeibull"},{"location":"generateWeibull/#generateweibullalpha-beta","text":"","title":"generateWeibull(alpha, beta)"},{"location":"generateWeibull/#overview","text":"The generateWeibull(alpha, beta) function generates a random number that follows a Weibull distribution.","title":"Overview"},{"location":"generateWeibull/#parameters","text":"Parameter Type Description alpha Number The scale parameter of the Weibull distribution. beta Number The shape parameter of the Weibull distribution.","title":"Parameters"},{"location":"generateWeibull/#returns","text":"Return Type Description result Number A random number from a Weibull distribution.","title":"Returns"},{"location":"generateWeibull/#example","text":"local result = StatBook.generateWeibull(1, 2) print(result) -- Output will vary","title":"Example"},{"location":"generateWeibull/#mathematical-background","text":"The function generates a random number result result that follows a Weibull distribution with scale parameter \\alpha \\alpha and shape parameter \\beta \\beta . The probability density function (pdf) of the Weibull distribution is defined as: f(x; \\alpha, \\beta) = \\beta \\alpha x^{\\beta - 1} e^{-\\alpha x^\\beta} \\quad \\text{for } x \\geq 0, \\alpha > 0, \\beta > 0 f(x; \\alpha, \\beta) = \\beta \\alpha x^{\\beta - 1} e^{-\\alpha x^\\beta} \\quad \\text{for } x \\geq 0, \\alpha > 0, \\beta > 0 In this implementation, the random variable from the Weibull distribution is generated using the formula: \\text{result} = \\alpha (-\\ln(1 - U))^{1/\\beta} \\text{result} = \\alpha (-\\ln(1 - U))^{1/\\beta} where U U is a uniformly distributed random number between 0 and 1, excluding 0 and 1.","title":"Mathematical Background"},{"location":"goodnessOfFit/","text":"goodnessOfFit(observed, expectedProportions, CL) Overview The goodnessOfFit function performs a Pearson's Chi-Squared Goodness of Fit Test. This test is used to determine if the observed frequency distribution of a variable matches the expected frequency distribution. Parameters Parameter Type Description Default observed Table Array of observed frequencies for each category. - expectedProportions Table Array of expected proportions for each category. - CL Number Confidence level for the test. 0.95 Returns Return Type Description pValue Number The p-value of the Chi-Squared Test. rejectH0 Boolean Whether to reject the null hypothesis at the given alpha. stat Number The Chi-Squared statistic. df Number The degrees of freedom. parametric Boolean Whether the test is parametric (always true for this test). testType String Specifies the type of test, \"Pearson's Goodness of Fit Test\". statType String Specifies the type of statistic used, \"Chi-Square\". warning Boolean Whether the sample size is too small for a reliable test. Example local observed = {50, 40, 30, 25} local expectedProportions = {0.3, 0.3, 0.2, 0.2} local CL = 0.95 local result = goodnessOfFit(observed, expectedProportions, CL) print(result.pValue, result.rejectH0, result.stat, result.df, result.warning) -- Output will vary based on the input Mathematical Background The Chi-Squared statistic \\chi^2 \\chi^2 is calculated using: \\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i} \\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i} Where O_i O_i and E_i E_i are the observed and expected frequencies for each category, respectively. The expected frequency E_i E_i for each category is given by: E_i = n \\times \\text{expectedProportions}_i E_i = n \\times \\text{expectedProportions}_i The degrees of freedom df df is: df = \\text{Number of categories} - 1 df = \\text{Number of categories} - 1 A p-value is calculated based on the Chi-Squared statistic and degrees of freedom. A warning is issued if more than 20% of the expected frequencies are less than 5.","title":"goodnessOfFit"},{"location":"goodnessOfFit/#goodnessoffitobserved-expectedproportions-cl","text":"","title":"goodnessOfFit(observed, expectedProportions, CL)"},{"location":"goodnessOfFit/#overview","text":"The goodnessOfFit function performs a Pearson's Chi-Squared Goodness of Fit Test. This test is used to determine if the observed frequency distribution of a variable matches the expected frequency distribution.","title":"Overview"},{"location":"goodnessOfFit/#parameters","text":"Parameter Type Description Default observed Table Array of observed frequencies for each category. - expectedProportions Table Array of expected proportions for each category. - CL Number Confidence level for the test. 0.95","title":"Parameters"},{"location":"goodnessOfFit/#returns","text":"Return Type Description pValue Number The p-value of the Chi-Squared Test. rejectH0 Boolean Whether to reject the null hypothesis at the given alpha. stat Number The Chi-Squared statistic. df Number The degrees of freedom. parametric Boolean Whether the test is parametric (always true for this test). testType String Specifies the type of test, \"Pearson's Goodness of Fit Test\". statType String Specifies the type of statistic used, \"Chi-Square\". warning Boolean Whether the sample size is too small for a reliable test.","title":"Returns"},{"location":"goodnessOfFit/#example","text":"local observed = {50, 40, 30, 25} local expectedProportions = {0.3, 0.3, 0.2, 0.2} local CL = 0.95 local result = goodnessOfFit(observed, expectedProportions, CL) print(result.pValue, result.rejectH0, result.stat, result.df, result.warning) -- Output will vary based on the input","title":"Example"},{"location":"goodnessOfFit/#mathematical-background","text":"The Chi-Squared statistic \\chi^2 \\chi^2 is calculated using: \\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i} \\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i} Where O_i O_i and E_i E_i are the observed and expected frequencies for each category, respectively. The expected frequency E_i E_i for each category is given by: E_i = n \\times \\text{expectedProportions}_i E_i = n \\times \\text{expectedProportions}_i The degrees of freedom df df is: df = \\text{Number of categories} - 1 df = \\text{Number of categories} - 1 A p-value is calculated based on the Chi-Squared statistic and degrees of freedom. A warning is issued if more than 20% of the expected frequencies are less than 5.","title":"Mathematical Background"},{"location":"hypTestGuide/","text":"Comprehensive Guide to Hypothesis Testing in Statistics Table of Contents Introduction Steps in Hypothesis Testing Null Hypothesis Alternative Hypothesis Types of Tests Test Statistics P-value Decision Making Introduction Hypothesis Testing is a critical procedure in statistics for validating an assumption regarding a data sample. It provides a framework for making statistical conclusions about populations based on sample data. Steps in Hypothesis Testing State the Null Hypothesis State the Alternative Hypothesis Determine the Level of Significance Collect and Analyze Sample Data Make a Decision Null Hypothesis The Null Hypothesis, denoted by H_0 H_0 , is a statement of no effect or difference and serves as the basis for statistical testing. Example : H_0: \\mu = 25 H_0: \\mu = 25 Alternative Hypothesis The Alternative Hypothesis, denoted by H_a H_a , is what you aim to prove. It is a statement that contradicts the null hypothesis. Example : H_a: \\mu \\neq 25 H_a: \\mu \\neq 25 Types of Tests One-tailed test : Looks for an effect in only one direction. Right-tailed Left-tailed Two-tailed test : Looks for an effect in either direction. ALL TESTS IN THIS MODULE ARE TWO-TAILED. A future update with one-tailed options may come in a a future update. Test Statistics Depending on the sample size and known parameters, different test statistics like Z, T are used. Z-test : Known variance, large sample size T-test : Unknown variance, small sample size P-value The p-value is the probability of obtaining the observed results, or something more extreme, given that the null hypothesis is true. Low p-value ( < \\alpha < \\alpha ) : Reject the null hypothesis High p-value ( > \\alpha > \\alpha ) : Fail to reject the null hypothesis Decision Making If p-value < \\alpha p-value < \\alpha : Reject the null hypothesis If p-value > \\alpha p-value > \\alpha : Fail to reject the null hypothesis Conclusion Hypothesis testing is a cornerstone method in statistics for verifying assumptions about a population based on sample data.","title":"Comprehensive Guide to Hypothesis Testing in Statistics"},{"location":"hypTestGuide/#comprehensive-guide-to-hypothesis-testing-in-statistics","text":"","title":"Comprehensive Guide to Hypothesis Testing in Statistics"},{"location":"hypTestGuide/#table-of-contents","text":"Introduction Steps in Hypothesis Testing Null Hypothesis Alternative Hypothesis Types of Tests Test Statistics P-value Decision Making","title":"Table of Contents"},{"location":"hypTestGuide/#introduction","text":"Hypothesis Testing is a critical procedure in statistics for validating an assumption regarding a data sample. It provides a framework for making statistical conclusions about populations based on sample data.","title":"Introduction"},{"location":"hypTestGuide/#steps-in-hypothesis-testing","text":"State the Null Hypothesis State the Alternative Hypothesis Determine the Level of Significance Collect and Analyze Sample Data Make a Decision","title":"Steps in Hypothesis Testing"},{"location":"hypTestGuide/#null-hypothesis","text":"The Null Hypothesis, denoted by H_0 H_0 , is a statement of no effect or difference and serves as the basis for statistical testing. Example : H_0: \\mu = 25 H_0: \\mu = 25","title":"Null Hypothesis"},{"location":"hypTestGuide/#alternative-hypothesis","text":"The Alternative Hypothesis, denoted by H_a H_a , is what you aim to prove. It is a statement that contradicts the null hypothesis. Example : H_a: \\mu \\neq 25 H_a: \\mu \\neq 25","title":"Alternative Hypothesis"},{"location":"hypTestGuide/#types-of-tests","text":"One-tailed test : Looks for an effect in only one direction. Right-tailed Left-tailed Two-tailed test : Looks for an effect in either direction. ALL TESTS IN THIS MODULE ARE TWO-TAILED. A future update with one-tailed options may come in a a future update.","title":"Types of Tests"},{"location":"hypTestGuide/#test-statistics","text":"Depending on the sample size and known parameters, different test statistics like Z, T are used. Z-test : Known variance, large sample size T-test : Unknown variance, small sample size","title":"Test Statistics"},{"location":"hypTestGuide/#p-value","text":"The p-value is the probability of obtaining the observed results, or something more extreme, given that the null hypothesis is true. Low p-value ( < \\alpha < \\alpha ) : Reject the null hypothesis High p-value ( > \\alpha > \\alpha ) : Fail to reject the null hypothesis","title":"P-value"},{"location":"hypTestGuide/#decision-making","text":"If p-value < \\alpha p-value < \\alpha : Reject the null hypothesis If p-value > \\alpha p-value > \\alpha : Fail to reject the null hypothesis","title":"Decision Making"},{"location":"hypTestGuide/#conclusion","text":"Hypothesis testing is a cornerstone method in statistics for verifying assumptions about a population based on sample data.","title":"Conclusion"},{"location":"hypergeometric2f1/","text":"hypergeometric2f1(a, b, c, z) Overview The hypergeometric2f1 function calculates the hypergeometric function \\, _2F_1(a, b; c; z) \\, _2F_1(a, b; c; z) using a series approximation. Parameters Parameter Type Description a Number First parameter of the hypergeometric function. b Number Second parameter of the hypergeometric function. c Number Third parameter of the hypergeometric function. z Number Argument for which the hypergeometric function is calculated. Returns Return Type Description hypergeom Number The calculated hypergeometric function value. Example local a = 1 local b = 2 local c = 3 local z = 0.5 local result = StatBook.hypergeometric2f1(a, b, c, z) print(result) -- Output will vary depending on input parameters Mathematical Background The hypergeometric function \\, _2F_1(a, b; c; z) \\, _2F_1(a, b; c; z) is computed using the following series approximation: \\, _2F_1(a, b; c; z) = 1 + \\frac{a \\cdot b}{c \\cdot 1!} \\cdot z + \\frac{a(a+1) \\cdot b(b+1)}{c(c+1) \\cdot 2!} \\cdot z^2 + \\ldots \\, _2F_1(a, b; c; z) = 1 + \\frac{a \\cdot b}{c \\cdot 1!} \\cdot z + \\frac{a(a+1) \\cdot b(b+1)}{c(c+1) \\cdot 2!} \\cdot z^2 + \\ldots The calculation continues until the change between the new sum and the previous sum is less than a tolerance value of 1 \\times 10^{-6} 1 \\times 10^{-6} or up to 100,000,000 iterations.","title":"hypergeometric2f1"},{"location":"hypergeometric2f1/#hypergeometric2f1a-b-c-z","text":"","title":"hypergeometric2f1(a, b, c, z)"},{"location":"hypergeometric2f1/#overview","text":"The hypergeometric2f1 function calculates the hypergeometric function \\, _2F_1(a, b; c; z) \\, _2F_1(a, b; c; z) using a series approximation.","title":"Overview"},{"location":"hypergeometric2f1/#parameters","text":"Parameter Type Description a Number First parameter of the hypergeometric function. b Number Second parameter of the hypergeometric function. c Number Third parameter of the hypergeometric function. z Number Argument for which the hypergeometric function is calculated.","title":"Parameters"},{"location":"hypergeometric2f1/#returns","text":"Return Type Description hypergeom Number The calculated hypergeometric function value.","title":"Returns"},{"location":"hypergeometric2f1/#example","text":"local a = 1 local b = 2 local c = 3 local z = 0.5 local result = StatBook.hypergeometric2f1(a, b, c, z) print(result) -- Output will vary depending on input parameters","title":"Example"},{"location":"hypergeometric2f1/#mathematical-background","text":"The hypergeometric function \\, _2F_1(a, b; c; z) \\, _2F_1(a, b; c; z) is computed using the following series approximation: \\, _2F_1(a, b; c; z) = 1 + \\frac{a \\cdot b}{c \\cdot 1!} \\cdot z + \\frac{a(a+1) \\cdot b(b+1)}{c(c+1) \\cdot 2!} \\cdot z^2 + \\ldots \\, _2F_1(a, b; c; z) = 1 + \\frac{a \\cdot b}{c \\cdot 1!} \\cdot z + \\frac{a(a+1) \\cdot b(b+1)}{c(c+1) \\cdot 2!} \\cdot z^2 + \\ldots The calculation continues until the change between the new sum and the previous sum is less than a tolerance value of 1 \\times 10^{-6} 1 \\times 10^{-6} or up to 100,000,000 iterations.","title":"Mathematical Background"},{"location":"incompleteBeta/","text":"incompleteBeta(a, b, x) Overview The incompleteBeta function calculates the incomplete Beta function I_x(a, b) I_x(a, b) for given parameters a a , b b , and x x . Parameters Parameter Type Description a Number First parameter of the incomplete Beta function. b Number Second parameter of the incomplete Beta function. x Number Value at which the incomplete Beta function is evaluated. Returns Return Type Description incbeta Number The calculated value of the incomplete Beta function. Example local a = 2.5 local b = 1.5 local x = 0.4 local result = StatBook.incompleteBeta(a, b, x) print(result) -- Output will vary depending on input parameters Mathematical Background The incomplete Beta function I_x(a, b) I_x(a, b) is calculated using the formula: I_x(a, b) = \\frac{x^a}{a} \\times {}_2F_1(a, 1 - b; a + 1; x) I_x(a, b) = \\frac{x^a}{a} \\times {}_2F_1(a, 1 - b; a + 1; x) Here, {}_2F_1(a, 1 - b; a + 1; x) {}_2F_1(a, 1 - b; a + 1; x) is the hypergeometric function computed by the function hypergeometric2f1(a, b, c, z) . The function is a wrapper for the hypergeometric2f1 function, which provides the necessary calculation for the hypergeometric term in the incomplete Beta function formula.","title":"incompleteBeta"},{"location":"incompleteBeta/#incompletebetaa-b-x","text":"","title":"incompleteBeta(a, b, x)"},{"location":"incompleteBeta/#overview","text":"The incompleteBeta function calculates the incomplete Beta function I_x(a, b) I_x(a, b) for given parameters a a , b b , and x x .","title":"Overview"},{"location":"incompleteBeta/#parameters","text":"Parameter Type Description a Number First parameter of the incomplete Beta function. b Number Second parameter of the incomplete Beta function. x Number Value at which the incomplete Beta function is evaluated.","title":"Parameters"},{"location":"incompleteBeta/#returns","text":"Return Type Description incbeta Number The calculated value of the incomplete Beta function.","title":"Returns"},{"location":"incompleteBeta/#example","text":"local a = 2.5 local b = 1.5 local x = 0.4 local result = StatBook.incompleteBeta(a, b, x) print(result) -- Output will vary depending on input parameters","title":"Example"},{"location":"incompleteBeta/#mathematical-background","text":"The incomplete Beta function I_x(a, b) I_x(a, b) is calculated using the formula: I_x(a, b) = \\frac{x^a}{a} \\times {}_2F_1(a, 1 - b; a + 1; x) I_x(a, b) = \\frac{x^a}{a} \\times {}_2F_1(a, 1 - b; a + 1; x) Here, {}_2F_1(a, 1 - b; a + 1; x) {}_2F_1(a, 1 - b; a + 1; x) is the hypergeometric function computed by the function hypergeometric2f1(a, b, c, z) . The function is a wrapper for the hypergeometric2f1 function, which provides the necessary calculation for the hypergeometric term in the incomplete Beta function formula.","title":"Mathematical Background"},{"location":"inference/","text":"inference(list, independent, CL, mu0) Overview Performs statistical inference tests based on the given data. The function will decide which test to use based on the number of samples, whether they are independent or not, and their distribution. NOTE 1: ALL TESTS IN THIS MODULE ARE TWO-TAILED (besides F and Chi-Square tests). A future update with one-tailed options may come in a future update. NOTE 2 : There aren't any two or more sample tests able to do a hypothesis test for a certain amount of difference between the means/medians of the samples. By default, all two or more sample tests check for a difference in distribution, that is, H_0: D_\\mu H_0: D_\\mu or D_\\eta = 0 D_\\eta = 0 NOTE 3: If dependent = true then all samples must have the same amount of entries. This is a result of the logic of a dependent test, which states that samples must have the same subjects treated at different points. StatBook v1.1 will likely have an algorithm that will weed out entries with nil or missing values. NOTE 4: It is highly recommended to return the warning value, as a warning = true value means the results may have a significant degree of inaccuracy due to computational limits. Parameters Parameter Type Description list Table A table of lists containing the data to be tested. independent Boolean, Nil Whether the samples are independent or not (Nil for 1-sample). CL Number, (Nil = 0.95) Confidence level for the statistical tests (Nil = 0.95). mu0 Number, (Nil = 0) The hypothetical mean tested against in 1-sample test. Defaults to 0 if Nil. Returns A table possibly containing the following: Key Type Description pValue Number The p-value of the test. rejectH0 Boolean Whether to reject the null hypothesis. stat Number The value of the test statistic. df Number, Table, Nil Degrees of freedom (some tests have two (F), some not applicable). center Table -> Number(s) Contains the mean(s) or median(s) of the dataset(s). centerComp Number, Nil Comparison value for the center (not applicable for some tests). lowerCI Number, Nil The lower bound of the confidence interval for mean/median (NA for 3+ sample tests). upperCI Number, Nil The upper bound of the confidence interval for the mean/median (NA for 3+ sample tests) dependent Boolean, Nil Whether the test is for dependent samples (Nil for one-sample tests). parametric Boolean Indicates if the test is parametric. nSamples Number Number of samples in the test. testType String Specifies the type of the test. statType String Specifies the type of the test statistic. centerType String Specifies what measure of central tendency is being tested. postHoc Table -> Tables, Nil Post-hoc tests with individual test data within each nested table (only for 3+ sample tests). postHocSig Table -> Tables, Nil Only contains Post-hoc tests with significant p-values (only for 3+ sample tests) warning Nil , True Warnings if applicable (Nil if false or NA). postHoc and postHocSig subfields (only for 3+ sample tests) A table possibly containing the following: Key Type Description group1 Number The index of the first sample selected in the Post Hoc. group2 Number The index of the second sample selected in the Post Hoc. pValue Number The p-value of the Post Hoc test. alpha Number The alpha needed for significance entailed by the Bonferonni correction. rejectH0 Boolean Whether to reject the null hypothesis. stat Number The value of the test statistic. df Number, Nil Degrees of freedom (some not applicable). center Table -> Numbers Contains the means or medians of the datasets. centerComp Number Comparison value for the center. lowerCI Number The lower bound of the confidence interval for mean/median. upperCI Number The upper bound of the confidence interval for the mean/median testType String Specifies the type of the test. statType String Specifies the type of the test statistic. centerType String Specifies what measure of central tendency is being tested. warning Nil , True Warnings if applicable (Nil if false or NA). Examples One-Sample Test: local data = { {12, 15, 14, 10, 13, 8, 13, 16, 8, 15, 22, 4, 7, 8} } -- in this case, either one-sample t-test or sign test (depends on normality of sample) local CL = 0.95 local mu0 = 12 -- if we did not specify mu0, it would default to 0, local result = StatBook.inference(data, nil, CL, mu0) print(result.pValue, result.stat) Two-Sample Test: local data = { {12, 15, 14, 10, 13, 6, 18}, {20, 24, 30, 27, 28, 19, 19} } local independent = false -- in this case, either two-sample dep. t-test or signed-rank test (depends on normality of samples + Folded-F test) local CL = 0.95 local result = StatBook.inference(data, independent, CL) print(result.pValue, result.centerComp, result.lowerCI, result.upperCI) Three-Plus Sample Test: local data = { {12, 15, 14, 10, 13, 14}, {20, 24, 30, 27, 28, 20}, {16, 25, 19, 20, 22, 18}, {23, 14, 10, 37, 8, 19} } local independent = true -- in this case, either ANOVA test or Kruskal Wallis test (depends on normality of samples + Levene Test) local CL = 0.95 local result = StatBook.inference(data, independent, CL) print(result.pValue, result.postHocSig.group1, result.postHocSig.group2, result.postHocSig.pValue) Algorithmic Background One Sample Test: If the data has only one list, the function performs either a t-test or a sign test based on the Shapiro-Wilk test result for normality. Two Sample Test (Dependent): If there are two dependent lists, it performs either a paired t-test or a Wilcoxon signed-rank test based on the Shapiro-Wilk test result. Two Sample Test (Independent): If there are two independent lists, it performs either a two-sample t-test or a Wilcoxon rank-sum test. Three or More Samples (Dependent): For three or more dependent lists, a Friedman test is performed. Three or More Samples (Independent): For three or more independent lists, the function performs either an ANOVA or a Kruskal-Wallis test based on Shapiro-Wilk and Levene tests. Internal functions oneSample, twoSampleDep, twoSampleInd, and threePlusSampleInd decide which specific test to use. Understanding Independent and Dependent Samples Independent Samples Definition : Samples are considered independent when the sample sets are not related in any way. Example : Suppose we have two different classes of students, and we measure their heights. The heights of students in the first class do not influence the heights of students in the second class. Statistical Tests : Typical tests for independent samples include the Two-Sample t-Test and ANOVA. Dependent Samples Definition : Samples are considered dependent (or paired) when the sample sets are related or matched in some way. Example : Before-and-after measurements on the same subjects (e.g., the heights of students at the beginning and end of a school year). Statistical Tests : Typical tests for dependent samples include the Paired t-Test and the Wilcoxon Signed-Rank Test. Understanding Parametric and Nonparametric Tests Parametric Tests Definition : Parametric tests make certain assumptions about the parameters of the population distribution from which the samples are drawn. Assumptions : These tests usually assume that the data is normally distributed. They may also assume homogeneity of variances among groups. Examples : t-Tests, ANOVA, and Pearson correlation are examples of parametric tests. Advantages : Generally more powerful and yield more information about specific parameters than nonparametric tests. Nonparametric Tests Definition : Nonparametric tests do not make strong assumptions about the distribution of the variables. Assumptions : These tests do not assume that the data is normally distributed and are often used when the data is ordinal or nominal. Examples : Wilcoxon Signed-Rank Test, Wilcoxon Rank-Sum Test, and Kruskal-Wallis Test are examples of nonparametric tests. Advantages : Useful for analyzing non-normal distributions and ordinal or nominal data. Statistical Tests: Mathematical Background 1. One Sample Test t-Test Hypothesis : Tests whether the mean of a sample is equal to a specified value. Formula : t = \\frac{\\bar{x} - \\mu_0}{s / \\sqrt{n}} t = \\frac{\\bar{x} - \\mu_0}{s / \\sqrt{n}} Assumptions : Assumes that the data is normally distributed. The Shapiro-Wilk test is used to verify this. Sign Test Hypothesis : Tests whether the median of the sample is equal to a specified value. Formula : The test uses the count of signs of the differences between each observation and the median. Assumptions : Does not assume normality. 2. Two Sample Test (Dependent) Paired t-Test Hypothesis : Tests whether the means of two paired samples are equal. Formula : t = \\frac{\\bar{d}}{s_d / \\sqrt{n}} t = \\frac{\\bar{d}}{s_d / \\sqrt{n}} Assumptions : Assumes that the differences between pairs are normally distributed. Wilcoxon Signed-Rank Test Hypothesis : Tests whether the medians of two paired samples are equal. Formula : Uses ranks of the absolute differences between pairs. Assumptions : Does not assume normality. 3. Two Sample Test (Independent) Two-Sample t-Test Hypothesis : Tests whether the means of two independent samples are equal. Formula : t = \\frac{\\bar{x}_1 - \\bar{x}_2}{\\sqrt{s^2/n_1 + s^2/n_2}} t = \\frac{\\bar{x}_1 - \\bar{x}_2}{\\sqrt{s^2/n_1 + s^2/n_2}} Assumptions : Assumes both samples are normally distributed and have equal variances. Wilcoxon Rank-Sum Test Hypothesis : Tests whether the medians of two independent samples are equal. Formula : Uses ranks of all observations. Assumptions : Does not assume normality. 4. Three or More Samples (Dependent) Friedman Test Hypothesis : Tests whether more than two related samples have the same population mean ranks. Formula : Based on ranks of each set of samples. Assumptions : Assumes that the observations are related. 5. Three or More Samples (Independent) ANOVA Hypothesis : Tests whether three or more independent samples have the same mean. Formula : F = \\frac{\\text{Between-group variance}}{\\text{Within-group variance}} F = \\frac{\\text{Between-group variance}}{\\text{Within-group variance}} Assumptions : Assumes each group is normally distributed and variances are equal. Shapiro-Wilk and Levene tests are used to verify this. Kruskal-Wallis Test Hypothesis : Tests whether three or more independent samples have the same median. Formula : Uses ranks of all observations. Assumptions : Does not assume normality or equal variances. Steps in Hypothesis Testing State the Null Hypothesis State the Alternative Hypothesis Determine the Level of Significance Collect and Analyze Sample Data Make a Decision Null Hypothesis The Null Hypothesis, denoted by H_0 H_0 , is a statement of no effect or difference and serves as the basis for statistical testing. Example : H_0: \\mu = 25 H_0: \\mu = 25 Alternative Hypothesis The Alternative Hypothesis, denoted by H_a H_a , is what you aim to prove. It is a statement that contradicts the null hypothesis. Example : H_a: \\mu \\neq 25 H_a: \\mu \\neq 25 Types of Tests One-tailed test : Looks for an effect in only one direction. Right-tailed Left-tailed Two-tailed test : Looks for an effect in either direction. Test Statistics Depending on the sample size and known parameters, different test statistics like Z, T are used. Z-test : Known variance, large sample size T-test : Unknown variance, small sample size P-value The p-value is the probability of obtaining the observed results, or something more extreme, given that the null hypothesis is true. Low p-value ( < \\alpha < \\alpha ) : Reject the null hypothesis High p-value ( > \\alpha > \\alpha ) : Fail to reject the null hypothesis Decision Making If p-value < \\alpha p-value < \\alpha : Reject the null hypothesis If p-value > \\alpha p-value > \\alpha : Fail to reject the null hypothesis","title":"inference"},{"location":"inference/#inferencelist-independent-cl-mu0","text":"","title":"inference(list, independent, CL, mu0)"},{"location":"inference/#overview","text":"Performs statistical inference tests based on the given data. The function will decide which test to use based on the number of samples, whether they are independent or not, and their distribution. NOTE 1: ALL TESTS IN THIS MODULE ARE TWO-TAILED (besides F and Chi-Square tests). A future update with one-tailed options may come in a future update. NOTE 2 : There aren't any two or more sample tests able to do a hypothesis test for a certain amount of difference between the means/medians of the samples. By default, all two or more sample tests check for a difference in distribution, that is, H_0: D_\\mu H_0: D_\\mu or D_\\eta = 0 D_\\eta = 0 NOTE 3: If dependent = true then all samples must have the same amount of entries. This is a result of the logic of a dependent test, which states that samples must have the same subjects treated at different points. StatBook v1.1 will likely have an algorithm that will weed out entries with nil or missing values. NOTE 4: It is highly recommended to return the warning value, as a warning = true value means the results may have a significant degree of inaccuracy due to computational limits.","title":"Overview"},{"location":"inference/#parameters","text":"Parameter Type Description list Table A table of lists containing the data to be tested. independent Boolean, Nil Whether the samples are independent or not (Nil for 1-sample). CL Number, (Nil = 0.95) Confidence level for the statistical tests (Nil = 0.95). mu0 Number, (Nil = 0) The hypothetical mean tested against in 1-sample test. Defaults to 0 if Nil.","title":"Parameters"},{"location":"inference/#returns","text":"A table possibly containing the following: Key Type Description pValue Number The p-value of the test. rejectH0 Boolean Whether to reject the null hypothesis. stat Number The value of the test statistic. df Number, Table, Nil Degrees of freedom (some tests have two (F), some not applicable). center Table -> Number(s) Contains the mean(s) or median(s) of the dataset(s). centerComp Number, Nil Comparison value for the center (not applicable for some tests). lowerCI Number, Nil The lower bound of the confidence interval for mean/median (NA for 3+ sample tests). upperCI Number, Nil The upper bound of the confidence interval for the mean/median (NA for 3+ sample tests) dependent Boolean, Nil Whether the test is for dependent samples (Nil for one-sample tests). parametric Boolean Indicates if the test is parametric. nSamples Number Number of samples in the test. testType String Specifies the type of the test. statType String Specifies the type of the test statistic. centerType String Specifies what measure of central tendency is being tested. postHoc Table -> Tables, Nil Post-hoc tests with individual test data within each nested table (only for 3+ sample tests). postHocSig Table -> Tables, Nil Only contains Post-hoc tests with significant p-values (only for 3+ sample tests) warning Nil , True Warnings if applicable (Nil if false or NA).","title":"Returns"},{"location":"inference/#posthoc-and-posthocsig-subfields-only-for-3-sample-tests","text":"A table possibly containing the following: Key Type Description group1 Number The index of the first sample selected in the Post Hoc. group2 Number The index of the second sample selected in the Post Hoc. pValue Number The p-value of the Post Hoc test. alpha Number The alpha needed for significance entailed by the Bonferonni correction. rejectH0 Boolean Whether to reject the null hypothesis. stat Number The value of the test statistic. df Number, Nil Degrees of freedom (some not applicable). center Table -> Numbers Contains the means or medians of the datasets. centerComp Number Comparison value for the center. lowerCI Number The lower bound of the confidence interval for mean/median. upperCI Number The upper bound of the confidence interval for the mean/median testType String Specifies the type of the test. statType String Specifies the type of the test statistic. centerType String Specifies what measure of central tendency is being tested. warning Nil , True Warnings if applicable (Nil if false or NA).","title":"postHoc and postHocSig subfields (only for 3+ sample tests)"},{"location":"inference/#examples","text":"One-Sample Test: local data = { {12, 15, 14, 10, 13, 8, 13, 16, 8, 15, 22, 4, 7, 8} } -- in this case, either one-sample t-test or sign test (depends on normality of sample) local CL = 0.95 local mu0 = 12 -- if we did not specify mu0, it would default to 0, local result = StatBook.inference(data, nil, CL, mu0) print(result.pValue, result.stat) Two-Sample Test: local data = { {12, 15, 14, 10, 13, 6, 18}, {20, 24, 30, 27, 28, 19, 19} } local independent = false -- in this case, either two-sample dep. t-test or signed-rank test (depends on normality of samples + Folded-F test) local CL = 0.95 local result = StatBook.inference(data, independent, CL) print(result.pValue, result.centerComp, result.lowerCI, result.upperCI) Three-Plus Sample Test: local data = { {12, 15, 14, 10, 13, 14}, {20, 24, 30, 27, 28, 20}, {16, 25, 19, 20, 22, 18}, {23, 14, 10, 37, 8, 19} } local independent = true -- in this case, either ANOVA test or Kruskal Wallis test (depends on normality of samples + Levene Test) local CL = 0.95 local result = StatBook.inference(data, independent, CL) print(result.pValue, result.postHocSig.group1, result.postHocSig.group2, result.postHocSig.pValue)","title":"Examples"},{"location":"inference/#algorithmic-background","text":"One Sample Test: If the data has only one list, the function performs either a t-test or a sign test based on the Shapiro-Wilk test result for normality. Two Sample Test (Dependent): If there are two dependent lists, it performs either a paired t-test or a Wilcoxon signed-rank test based on the Shapiro-Wilk test result. Two Sample Test (Independent): If there are two independent lists, it performs either a two-sample t-test or a Wilcoxon rank-sum test. Three or More Samples (Dependent): For three or more dependent lists, a Friedman test is performed. Three or More Samples (Independent): For three or more independent lists, the function performs either an ANOVA or a Kruskal-Wallis test based on Shapiro-Wilk and Levene tests. Internal functions oneSample, twoSampleDep, twoSampleInd, and threePlusSampleInd decide which specific test to use.","title":"Algorithmic Background"},{"location":"inference/#understanding-independent-and-dependent-samples","text":"","title":"Understanding Independent and Dependent Samples"},{"location":"inference/#independent-samples","text":"Definition : Samples are considered independent when the sample sets are not related in any way. Example : Suppose we have two different classes of students, and we measure their heights. The heights of students in the first class do not influence the heights of students in the second class. Statistical Tests : Typical tests for independent samples include the Two-Sample t-Test and ANOVA.","title":"Independent Samples"},{"location":"inference/#dependent-samples","text":"Definition : Samples are considered dependent (or paired) when the sample sets are related or matched in some way. Example : Before-and-after measurements on the same subjects (e.g., the heights of students at the beginning and end of a school year). Statistical Tests : Typical tests for dependent samples include the Paired t-Test and the Wilcoxon Signed-Rank Test.","title":"Dependent Samples"},{"location":"inference/#understanding-parametric-and-nonparametric-tests","text":"","title":"Understanding Parametric and Nonparametric Tests"},{"location":"inference/#parametric-tests","text":"Definition : Parametric tests make certain assumptions about the parameters of the population distribution from which the samples are drawn. Assumptions : These tests usually assume that the data is normally distributed. They may also assume homogeneity of variances among groups. Examples : t-Tests, ANOVA, and Pearson correlation are examples of parametric tests. Advantages : Generally more powerful and yield more information about specific parameters than nonparametric tests.","title":"Parametric Tests"},{"location":"inference/#nonparametric-tests","text":"Definition : Nonparametric tests do not make strong assumptions about the distribution of the variables. Assumptions : These tests do not assume that the data is normally distributed and are often used when the data is ordinal or nominal. Examples : Wilcoxon Signed-Rank Test, Wilcoxon Rank-Sum Test, and Kruskal-Wallis Test are examples of nonparametric tests. Advantages : Useful for analyzing non-normal distributions and ordinal or nominal data.","title":"Nonparametric Tests"},{"location":"inference/#statistical-tests-mathematical-background","text":"","title":"Statistical Tests: Mathematical Background"},{"location":"inference/#1-one-sample-test","text":"","title":"1. One Sample Test"},{"location":"inference/#t-test","text":"Hypothesis : Tests whether the mean of a sample is equal to a specified value. Formula : t = \\frac{\\bar{x} - \\mu_0}{s / \\sqrt{n}} t = \\frac{\\bar{x} - \\mu_0}{s / \\sqrt{n}} Assumptions : Assumes that the data is normally distributed. The Shapiro-Wilk test is used to verify this.","title":"t-Test"},{"location":"inference/#sign-test","text":"Hypothesis : Tests whether the median of the sample is equal to a specified value. Formula : The test uses the count of signs of the differences between each observation and the median. Assumptions : Does not assume normality.","title":"Sign Test"},{"location":"inference/#2-two-sample-test-dependent","text":"","title":"2. Two Sample Test (Dependent)"},{"location":"inference/#paired-t-test","text":"Hypothesis : Tests whether the means of two paired samples are equal. Formula : t = \\frac{\\bar{d}}{s_d / \\sqrt{n}} t = \\frac{\\bar{d}}{s_d / \\sqrt{n}} Assumptions : Assumes that the differences between pairs are normally distributed.","title":"Paired t-Test"},{"location":"inference/#wilcoxon-signed-rank-test","text":"Hypothesis : Tests whether the medians of two paired samples are equal. Formula : Uses ranks of the absolute differences between pairs. Assumptions : Does not assume normality.","title":"Wilcoxon Signed-Rank Test"},{"location":"inference/#3-two-sample-test-independent","text":"","title":"3. Two Sample Test (Independent)"},{"location":"inference/#two-sample-t-test","text":"Hypothesis : Tests whether the means of two independent samples are equal. Formula : t = \\frac{\\bar{x}_1 - \\bar{x}_2}{\\sqrt{s^2/n_1 + s^2/n_2}} t = \\frac{\\bar{x}_1 - \\bar{x}_2}{\\sqrt{s^2/n_1 + s^2/n_2}} Assumptions : Assumes both samples are normally distributed and have equal variances.","title":"Two-Sample t-Test"},{"location":"inference/#wilcoxon-rank-sum-test","text":"Hypothesis : Tests whether the medians of two independent samples are equal. Formula : Uses ranks of all observations. Assumptions : Does not assume normality.","title":"Wilcoxon Rank-Sum Test"},{"location":"inference/#4-three-or-more-samples-dependent","text":"","title":"4. Three or More Samples (Dependent)"},{"location":"inference/#friedman-test","text":"Hypothesis : Tests whether more than two related samples have the same population mean ranks. Formula : Based on ranks of each set of samples. Assumptions : Assumes that the observations are related.","title":"Friedman Test"},{"location":"inference/#5-three-or-more-samples-independent","text":"","title":"5. Three or More Samples (Independent)"},{"location":"inference/#anova","text":"Hypothesis : Tests whether three or more independent samples have the same mean. Formula : F = \\frac{\\text{Between-group variance}}{\\text{Within-group variance}} F = \\frac{\\text{Between-group variance}}{\\text{Within-group variance}} Assumptions : Assumes each group is normally distributed and variances are equal. Shapiro-Wilk and Levene tests are used to verify this.","title":"ANOVA"},{"location":"inference/#kruskal-wallis-test","text":"Hypothesis : Tests whether three or more independent samples have the same median. Formula : Uses ranks of all observations. Assumptions : Does not assume normality or equal variances.","title":"Kruskal-Wallis Test"},{"location":"inference/#steps-in-hypothesis-testing","text":"State the Null Hypothesis State the Alternative Hypothesis Determine the Level of Significance Collect and Analyze Sample Data Make a Decision","title":"Steps in Hypothesis Testing"},{"location":"inference/#null-hypothesis","text":"The Null Hypothesis, denoted by H_0 H_0 , is a statement of no effect or difference and serves as the basis for statistical testing. Example : H_0: \\mu = 25 H_0: \\mu = 25","title":"Null Hypothesis"},{"location":"inference/#alternative-hypothesis","text":"The Alternative Hypothesis, denoted by H_a H_a , is what you aim to prove. It is a statement that contradicts the null hypothesis. Example : H_a: \\mu \\neq 25 H_a: \\mu \\neq 25","title":"Alternative Hypothesis"},{"location":"inference/#types-of-tests","text":"One-tailed test : Looks for an effect in only one direction. Right-tailed Left-tailed Two-tailed test : Looks for an effect in either direction.","title":"Types of Tests"},{"location":"inference/#test-statistics","text":"Depending on the sample size and known parameters, different test statistics like Z, T are used. Z-test : Known variance, large sample size T-test : Unknown variance, small sample size","title":"Test Statistics"},{"location":"inference/#p-value","text":"The p-value is the probability of obtaining the observed results, or something more extreme, given that the null hypothesis is true. Low p-value ( < \\alpha < \\alpha ) : Reject the null hypothesis High p-value ( > \\alpha > \\alpha ) : Fail to reject the null hypothesis","title":"P-value"},{"location":"inference/#decision-making","text":"If p-value < \\alpha p-value < \\alpha : Reject the null hypothesis If p-value > \\alpha p-value > \\alpha : Fail to reject the null hypothesis","title":"Decision Making"},{"location":"inverf/","text":"inverf(x) Overview The inverf function calculates the inverse of the error function \\text{erf}^{-1}(x) \\text{erf}^{-1}(x) using the Newton-Raphson method for numerical approximation. Parameters Parameter Type Description x Number The value to find the inverse error function of. Must be in the range [-1, 1] [-1, 1] . Returns Return Type Description inv Number The calculated inverse error function value \\text{erf}^{-1}(x) \\text{erf}^{-1}(x) . Example local x = 0.5 local result = StatBook.inverf(x) print(result) -- Output will be approximately 0.4769 Mathematical Background The function calculates \\text{erf}^{-1}(x) \\text{erf}^{-1}(x) using the Newton-Raphson method for solving equations. The Newton-Raphson formula for iteration is: x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)} x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)} In this context, f(x) = \\text{erf}(x) - a f(x) = \\text{erf}(x) - a and f'(x) = \\frac{2}{\\sqrt{\\pi}} \\exp(-x^2) f'(x) = \\frac{2}{\\sqrt{\\pi}} \\exp(-x^2) , where a a is the argument passed to module.inverf .","title":"inverf"},{"location":"inverf/#inverfx","text":"","title":"inverf(x)"},{"location":"inverf/#overview","text":"The inverf function calculates the inverse of the error function \\text{erf}^{-1}(x) \\text{erf}^{-1}(x) using the Newton-Raphson method for numerical approximation.","title":"Overview"},{"location":"inverf/#parameters","text":"Parameter Type Description x Number The value to find the inverse error function of. Must be in the range [-1, 1] [-1, 1] .","title":"Parameters"},{"location":"inverf/#returns","text":"Return Type Description inv Number The calculated inverse error function value \\text{erf}^{-1}(x) \\text{erf}^{-1}(x) .","title":"Returns"},{"location":"inverf/#example","text":"local x = 0.5 local result = StatBook.inverf(x) print(result) -- Output will be approximately 0.4769","title":"Example"},{"location":"inverf/#mathematical-background","text":"The function calculates \\text{erf}^{-1}(x) \\text{erf}^{-1}(x) using the Newton-Raphson method for solving equations. The Newton-Raphson formula for iteration is: x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)} x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)} In this context, f(x) = \\text{erf}(x) - a f(x) = \\text{erf}(x) - a and f'(x) = \\frac{2}{\\sqrt{\\pi}} \\exp(-x^2) f'(x) = \\frac{2}{\\sqrt{\\pi}} \\exp(-x^2) , where a a is the argument passed to module.inverf .","title":"Mathematical Background"},{"location":"markovChain/","text":"markovChain(states, transitionProbs, startState, length, returnFullSequence) Overview Generates a sequence of states based on a Markov Chain model. Parameters Parameter Type Description states Table List of possible states in the Markov Chain. transitionProbs Table Transition probability matrix between states. startState Any The state to start the sequence from. length Number The length of the sequence to be generated. returnFullSequence Boolean Whether to return the full sequence or just the final state. Default is false . Returns Return Type Description sequence or sequence[length] Table or Any Returns the entire sequence if returnFullSequence is true; otherwise, returns the last state. Example local states = {\"Sunny\", \"Cloudy\", \"Rainy\"} local transitionProbs = { Sunny = {Sunny = 0.8, Cloudy = 0.15, Rainy = 0.05}, Cloudy = {Sunny = 0.2, Cloudy = 0.6, Rainy = 0.2}, Rainy = {Sunny = 0.1, Cloudy = 0.3, Rainy = 0.6} } local startState = \"Sunny\" local length = 10 local sequence = StatBook.markovChain(states, transitionProbs, startState, length, true) print(sequence) -- Output will be a table representing the sequence Mathematical Background The function generates a sequence based on a Markov Chain, which models the transitions between various states with certain probabilities. A Markov Chain is defined by its states and the transition probabilities between these states. The function takes a startState and moves to the next state based on the given transitionProbs , repeating this process for length times. The chooseNextState function is used internally to select the next state based on the current state and the transition probabilities.","title":"markovChain"},{"location":"markovChain/#markovchainstates-transitionprobs-startstate-length-returnfullsequence","text":"","title":"markovChain(states, transitionProbs, startState, length, returnFullSequence)"},{"location":"markovChain/#overview","text":"Generates a sequence of states based on a Markov Chain model.","title":"Overview"},{"location":"markovChain/#parameters","text":"Parameter Type Description states Table List of possible states in the Markov Chain. transitionProbs Table Transition probability matrix between states. startState Any The state to start the sequence from. length Number The length of the sequence to be generated. returnFullSequence Boolean Whether to return the full sequence or just the final state. Default is false .","title":"Parameters"},{"location":"markovChain/#returns","text":"Return Type Description sequence or sequence[length] Table or Any Returns the entire sequence if returnFullSequence is true; otherwise, returns the last state.","title":"Returns"},{"location":"markovChain/#example","text":"local states = {\"Sunny\", \"Cloudy\", \"Rainy\"} local transitionProbs = { Sunny = {Sunny = 0.8, Cloudy = 0.15, Rainy = 0.05}, Cloudy = {Sunny = 0.2, Cloudy = 0.6, Rainy = 0.2}, Rainy = {Sunny = 0.1, Cloudy = 0.3, Rainy = 0.6} } local startState = \"Sunny\" local length = 10 local sequence = StatBook.markovChain(states, transitionProbs, startState, length, true) print(sequence) -- Output will be a table representing the sequence","title":"Example"},{"location":"markovChain/#mathematical-background","text":"The function generates a sequence based on a Markov Chain, which models the transitions between various states with certain probabilities. A Markov Chain is defined by its states and the transition probabilities between these states. The function takes a startState and moves to the next state based on the given transitionProbs , repeating this process for length times. The chooseNextState function is used internally to select the next state based on the current state and the transition probabilities.","title":"Mathematical Background"},{"location":"matAdd/","text":"matAdd(A, B) The matAdd function performs element-wise addition between two matrices A and B . Both matrices must have the same dimensions for the operation to be valid. Parameters Parameter Type Description Default A table The first matrix, represented as a 2D table. Required B table The second matrix, also represented as a 2D table. Required Returns Variable Type Description C table A new matrix, represented as a 2D table, that is the result of A plus B . Example local A = { {1, 2}, {3, 4} } local B = { {2, 1}, {4, 3} } local result = StatsBook.matAdd(A, B) Notes Both matrices A and B must have the same dimensions. Otherwise, the function may throw an error or return incorrect results.","title":"matAdd"},{"location":"matAdd/#matadda-b","text":"The matAdd function performs element-wise addition between two matrices A and B . Both matrices must have the same dimensions for the operation to be valid.","title":"matAdd(A, B)"},{"location":"matAdd/#parameters","text":"Parameter Type Description Default A table The first matrix, represented as a 2D table. Required B table The second matrix, also represented as a 2D table. Required","title":"Parameters"},{"location":"matAdd/#returns","text":"Variable Type Description C table A new matrix, represented as a 2D table, that is the result of A plus B .","title":"Returns"},{"location":"matAdd/#example","text":"local A = { {1, 2}, {3, 4} } local B = { {2, 1}, {4, 3} } local result = StatsBook.matAdd(A, B)","title":"Example"},{"location":"matAdd/#notes","text":"Both matrices A and B must have the same dimensions. Otherwise, the function may throw an error or return incorrect results.","title":"Notes"},{"location":"matInverse/","text":"matInverse(matrix) The matInverse function calculates the inverse of a square matrix, if it exists. The function will return nil if the matrix is not square or if the determinant is zero (indicating that the matrix is not invertible). Parameters Parameter Type Description Default matrix table The square matrix to be inverted, represented as a 2D table. Required Returns Variable Type Description inverseMatrix table A new matrix represented as a 2D table, which is the inverse of the input matrix. nil nil If the matrix is not square or if the matrix is singular (determinant is zero). Example local matrix = { {2, -1, 0}, {-1, 2, -1}, {0, -1, 2} } local result = StatsBook.matInverse(matrix) Notes If the matrix is not square or if the matrix is singular (determinant is zero), the result is nil. Ensure your matrix is square and the determinant is not 0.","title":"matInverse"},{"location":"matInverse/#matinversematrix","text":"The matInverse function calculates the inverse of a square matrix, if it exists. The function will return nil if the matrix is not square or if the determinant is zero (indicating that the matrix is not invertible).","title":"matInverse(matrix)"},{"location":"matInverse/#parameters","text":"Parameter Type Description Default matrix table The square matrix to be inverted, represented as a 2D table. Required","title":"Parameters"},{"location":"matInverse/#returns","text":"Variable Type Description inverseMatrix table A new matrix represented as a 2D table, which is the inverse of the input matrix. nil nil If the matrix is not square or if the matrix is singular (determinant is zero).","title":"Returns"},{"location":"matInverse/#example","text":"local matrix = { {2, -1, 0}, {-1, 2, -1}, {0, -1, 2} } local result = StatsBook.matInverse(matrix)","title":"Example"},{"location":"matInverse/#notes","text":"If the matrix is not square or if the matrix is singular (determinant is zero), the result is nil. Ensure your matrix is square and the determinant is not 0.","title":"Notes"},{"location":"matMult/","text":"matMult(A, B) The matMult function performs matrix multiplication between two matrices A and B . The function assumes that the matrices are in correct dimensions for multiplication to proceed. It returns a new matrix C which is the result of the multiplication. Parameters Parameter Type Description Default A table The first matrix, represented as a 2D table. Required B table The second matrix, represented as a 2D table. Required Returns Variable Type Description resultMatrix table A new matrix represented as a 2D table, resulting from A multiplied by B . Example local A = { {1, 2}, {3, 4} } local B = { {2, 0}, {1, 2} } local C = StatsBook.matMult(A, B) Notes The function does not handle cases where the matrices are not of compatible dimensions for multiplication. Make sure the number of columns in A matches the number of rows in B .","title":"matMult"},{"location":"matMult/#matmulta-b","text":"The matMult function performs matrix multiplication between two matrices A and B . The function assumes that the matrices are in correct dimensions for multiplication to proceed. It returns a new matrix C which is the result of the multiplication.","title":"matMult(A, B)"},{"location":"matMult/#parameters","text":"Parameter Type Description Default A table The first matrix, represented as a 2D table. Required B table The second matrix, represented as a 2D table. Required","title":"Parameters"},{"location":"matMult/#returns","text":"Variable Type Description resultMatrix table A new matrix represented as a 2D table, resulting from A multiplied by B .","title":"Returns"},{"location":"matMult/#example","text":"local A = { {1, 2}, {3, 4} } local B = { {2, 0}, {1, 2} } local C = StatsBook.matMult(A, B)","title":"Example"},{"location":"matMult/#notes","text":"The function does not handle cases where the matrices are not of compatible dimensions for multiplication. Make sure the number of columns in A matches the number of rows in B .","title":"Notes"},{"location":"matSubtract/","text":"matSubtract(A, B) The matSubtract function performs element-wise subtraction between two matrices A and B . Both matrices must have the same dimensions for the operation to be valid. Parameters Parameter Type Description Default A table The first matrix, represented as a 2D table. Required B table The second matrix, also represented as a 2D table. Required Returns Variable Type Description C table A new matrix, represented as a 2D table, that is the result of A minus B . Example local A = { {1, 2}, {3, 4} } local B = { {2, 1}, {4, 3} } local result = StatsBook.matSubtract(A, B) Notes Both matrices A and B must have the same dimensions. Otherwise, the function may throw an error or return incorrect results.","title":"matSubtract"},{"location":"matSubtract/#matsubtracta-b","text":"The matSubtract function performs element-wise subtraction between two matrices A and B . Both matrices must have the same dimensions for the operation to be valid.","title":"matSubtract(A, B)"},{"location":"matSubtract/#parameters","text":"Parameter Type Description Default A table The first matrix, represented as a 2D table. Required B table The second matrix, also represented as a 2D table. Required","title":"Parameters"},{"location":"matSubtract/#returns","text":"Variable Type Description C table A new matrix, represented as a 2D table, that is the result of A minus B .","title":"Returns"},{"location":"matSubtract/#example","text":"local A = { {1, 2}, {3, 4} } local B = { {2, 1}, {4, 3} } local result = StatsBook.matSubtract(A, B)","title":"Example"},{"location":"matSubtract/#notes","text":"Both matrices A and B must have the same dimensions. Otherwise, the function may throw an error or return incorrect results.","title":"Notes"},{"location":"matTranspose/","text":"matTranspose(matrix) The matTranspose function takes a given matrix matrix and returns its transpose. The transpose of a matrix is obtained by flipping the matrix over its diagonal. Parameters Parameter Type Description Default matrix table The matrix to be transposed, represented as a 2D table. Required Returns Variable Type Description resultMatrix table A new matrix represented as a 2D table, which is the transpose of the input matrix matrix . Example local matrix = { {1, 2}, {3, 4}, {5, 6} } local result = StatsBook.matTranspose(matrix)","title":"matTranspose"},{"location":"matTranspose/#mattransposematrix","text":"The matTranspose function takes a given matrix matrix and returns its transpose. The transpose of a matrix is obtained by flipping the matrix over its diagonal.","title":"matTranspose(matrix)"},{"location":"matTranspose/#parameters","text":"Parameter Type Description Default matrix table The matrix to be transposed, represented as a 2D table. Required","title":"Parameters"},{"location":"matTranspose/#returns","text":"Variable Type Description resultMatrix table A new matrix represented as a 2D table, which is the transpose of the input matrix matrix .","title":"Returns"},{"location":"matTranspose/#example","text":"local matrix = { {1, 2}, {3, 4}, {5, 6} } local result = StatsBook.matTranspose(matrix)","title":"Example"},{"location":"mean/","text":"mean(list) Overview The mean function calculates the arithmetic mean, commonly known as the average, of a given list of numbers. The function sums up all the elements in the list and divides it by the total number of elements to determine the mean value. Parameters Parameter Name Type Description Required Default Value list table A list of numerical values for which the mean will be calculated. The list must contain at least one numerical value. Yes N/A Returns Type Description Possible Values number The mean (average) of the elements in the list. The return value will be a floating-point number if the mean is not an integer. Any numerical value Constraints The list parameter must be a table containing numerical values only. The table must have at least one element; otherwise, the function will return an undefined result due to division by zero. Example Use local myList = {1, 2, 3, 4, 5} local result = StatBook.mean(myList) print(result) -- Output will be 3","title":"mean"},{"location":"mean/#meanlist","text":"","title":"mean(list)"},{"location":"mean/#overview","text":"The mean function calculates the arithmetic mean, commonly known as the average, of a given list of numbers. The function sums up all the elements in the list and divides it by the total number of elements to determine the mean value.","title":"Overview"},{"location":"mean/#parameters","text":"Parameter Name Type Description Required Default Value list table A list of numerical values for which the mean will be calculated. The list must contain at least one numerical value. Yes N/A","title":"Parameters"},{"location":"mean/#returns","text":"Type Description Possible Values number The mean (average) of the elements in the list. The return value will be a floating-point number if the mean is not an integer. Any numerical value","title":"Returns"},{"location":"mean/#constraints","text":"The list parameter must be a table containing numerical values only. The table must have at least one element; otherwise, the function will return an undefined result due to division by zero.","title":"Constraints"},{"location":"mean/#example-use","text":"local myList = {1, 2, 3, 4, 5} local result = StatBook.mean(myList) print(result) -- Output will be 3","title":"Example Use"},{"location":"median/","text":"median(list) Overview The median function calculates the median value from a given list of numbers. The median is the middle value in a data set sorted in ascending order. For a list with an odd number of elements, the median is the exact middle value. For a list with an even number of elements, the median is the average of the two middle values. Parameters Parameter Name Type Description Required Default Value list table A list of numerical values to find the median from. The list must contain at least one numerical value. Yes N/A Returns Type Description Possible Values number or nil The median value of the elements in the list. If the list is empty or nil values are encountered, returns nil . Any numerical value or nil Constraints The list parameter must be a table containing numerical values only. The table must have at least one element; otherwise, the function will return nil . Example Use local myList = {7, 2, 3, 6, 5} local result = StatBook.median(myList) print(result) -- Output will be 5","title":"median"},{"location":"median/#medianlist","text":"","title":"median(list)"},{"location":"median/#overview","text":"The median function calculates the median value from a given list of numbers. The median is the middle value in a data set sorted in ascending order. For a list with an odd number of elements, the median is the exact middle value. For a list with an even number of elements, the median is the average of the two middle values.","title":"Overview"},{"location":"median/#parameters","text":"Parameter Name Type Description Required Default Value list table A list of numerical values to find the median from. The list must contain at least one numerical value. Yes N/A","title":"Parameters"},{"location":"median/#returns","text":"Type Description Possible Values number or nil The median value of the elements in the list. If the list is empty or nil values are encountered, returns nil . Any numerical value or nil","title":"Returns"},{"location":"median/#constraints","text":"The list parameter must be a table containing numerical values only. The table must have at least one element; otherwise, the function will return nil .","title":"Constraints"},{"location":"median/#example-use","text":"local myList = {7, 2, 3, 6, 5} local result = StatBook.median(myList) print(result) -- Output will be 5","title":"Example Use"},{"location":"mode/","text":"mode(list) Overview The mode function calculates the mode(s) of a given list of numbers. The mode is the number(s) that appear most frequently in the data set. If multiple numbers have the same highest frequency, all of them are returned as modes in a table. Parameters Parameter Name Type Description Required Default Value list table A list of numerical values to find the mode from. The list must contain at least one numerical value. Yes N/A Returns Type Description Possible Values table A table containing the mode(s) of the list. If there are multiple modes, all will be included in the returned table. A table containing numerical values Constraints The list parameter must be a table containing numerical values only. The table must have at least one element; otherwise, the function will return an empty table. Example Use local myList = {1, 2, 3, 2, 2, 4} local result = StatBook.mode(myList) -- The modes of the list is 2 as it appears most frequently for _, v in ipairs(result) do print(v) end","title":"mode"},{"location":"mode/#modelist","text":"","title":"mode(list)"},{"location":"mode/#overview","text":"The mode function calculates the mode(s) of a given list of numbers. The mode is the number(s) that appear most frequently in the data set. If multiple numbers have the same highest frequency, all of them are returned as modes in a table.","title":"Overview"},{"location":"mode/#parameters","text":"Parameter Name Type Description Required Default Value list table A list of numerical values to find the mode from. The list must contain at least one numerical value. Yes N/A","title":"Parameters"},{"location":"mode/#returns","text":"Type Description Possible Values table A table containing the mode(s) of the list. If there are multiple modes, all will be included in the returned table. A table containing numerical values","title":"Returns"},{"location":"mode/#constraints","text":"The list parameter must be a table containing numerical values only. The table must have at least one element; otherwise, the function will return an empty table.","title":"Constraints"},{"location":"mode/#example-use","text":"local myList = {1, 2, 3, 2, 2, 4} local result = StatBook.mode(myList) -- The modes of the list is 2 as it appears most frequently for _, v in ipairs(result) do print(v) end","title":"Example Use"},{"location":"multipleLinearRegression/","text":"multipleLinearRegression(X, Y, forwardReg, diagnostics, CL) Overview The multipleLinearRegression function performs multiple linear regression analysis on given data sets. This advanced function includes several features, such as forward regression based on Mallows's Cp, diagnostic statistics, and calculation of Variance Inflation Factors (VIFs). NOTE 1 : ALL T-TESTS IN THIS MODULE ARE TWO-TAILED. NOTE 2: All data point subtables within the X X table must have the same amount of entries. Currently, the table does not have an algorithm to deal with nil values (this will come very soon in 1.1). Therefore, it is the developer's responsibility to input a proper X X table and format the table beforehand. NOTE 3: Before invoking the function, ensure that the X X table is formatted correctly as a 2D table, where each inner table represents a row of the matrix. If X X is not in this format, you may use the module.matTranspose(matrix) function to transpose X X into a compatible layout. This is crucial for the proper functioning of the function. NOTE 4: The VIFs table is only there as a warning. VIF values do not impact the regression model and do not automatically remove multi-collinear predictors. You will have to manually account for this if you choose to remove a predictor yourself and thus rerun multipleLinearRegression again. StatBook v1.1 will seek to give the developer an option to automatically eliminate multi-collinear predictors based on high VIF values. Parameters Parameter Type Description Default X table The independent variables matrix (2D table). Required Y table The dependent variable vector (1D table). Required forwardReg boolean Enables or disables the forward regression process. true diagnostics boolean Enables or disables diagnostic statistics. true CL number Confidence level for t-tests and F-test. 0.95 Returns (if diagnostics ~= true ) Variable Type Description yHat table -> number(s) Fitted values for the dependent variable. indices table -> number(s) Indices of betas retained in model from lmOrig to lmNew Returns (if diagnostics = true ) Variable Type Description Subfields lmNew table -> tables Model after forward selection with Mallow's C(p) yes lmOrig table -> tables Model before forward selection with Mallow's C(p) yes indices table -> number(s) Indices of betas retained in model from lmOrig to lmNew lmNew and lmOrig Subfields* Variable Type Description Sub-subfields yHat table -> number(s) Fitted values for the dependent variable. r2 number R^2 R^2 value indicating the goodness of fit. r2adj number Adjusted R^2 R^2 accounting for # of predictors. F number F-statistic used for hypothesis testing. pValueF number p-value of the F-statistic. BetaInfo table -> table Information about predictor coefficients. yes VIFs * table -> table Indicates multicollinearity status. yes * There isn't a VIFs subfield in lmOrig. BetaInfo Sub-subfields Variable Type Description predictorIndex table -> number The original index of the beta in question. rejectH0 table -> boolean Hypotheses test results for individual betas. t table -> number The t-statistic of the beta in question. pValue table -> boolean The p-value of the beta in question. VIFs Sub-subfields Variable Type Description VIF table -> number Variance Inflation Factors of each beta. summaryVIF table -> string A description of potential multicollinearity Example Usage -- regression with 6 datapoints and 3 predictors local X = {{1, 4, 7}, {2, 3, 5}, {3, 2, 1}, {4, 2, 2}, {5, 8, 3}, {3, 6, 2}} local Y = {3, 3, 2, 2, 4, 5} local model = StatBook.multipleLinearRegression(X, Y) print(model.lmNew.pValueF, model.lmOrig.pValueF, model.lmNew.BetaInfo.t, model.lmNew.BetaInfo.pValue) -- can return a lot more than that -- rest is optional local Xtest = {1, 5, 6} local prediction = predictY(Xtest, model) Subsequent Usage After acquiring the model from module.multipleLinearRegression , you can employ the module.predictY(X, model, yHat, indices) function directly with the returned model to predict new Y Y values based on new X X values. The model object contains all necessary coefficients and information for the prediction. Mathematical Background Multiple Linear Regression aims to model the relationship between multiple independent variables and a dependent variable by fitting a linear equation to the observed data. Here we dive into the mathematical details of how it works. Matrices A multiple linear regression model can be represented in matrix form as: \\mathbf{Y} = \\mathbf{X}\\beta + \\epsilon \\mathbf{Y} = \\mathbf{X}\\beta + \\epsilon \\mathbf{Y} \\mathbf{Y} is a n \\times 1 n \\times 1 matrix (column vector) of the dependent variable. \\mathbf{X} \\mathbf{X} is a n \\times p n \\times p matrix of the independent variables, including the intercept. \\beta \\beta is a p \\times 1 p \\times 1 matrix (column vector) of the coefficients. \\epsilon \\epsilon is a n \\times 1 n \\times 1 matrix (column vector) of the error terms. Inverses and Coefficients The coefficients \\beta \\beta can be estimated using the formula: \\hat{\\beta} = (\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\mathbf{Y} \\hat{\\beta} = (\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\mathbf{Y} \\mathbf{X}^T \\mathbf{X}^T is the transpose of \\mathbf{X} \\mathbf{X} . (\\mathbf{X}^T\\mathbf{X})^{-1} (\\mathbf{X}^T\\mathbf{X})^{-1} is the inverse of \\mathbf{X}^T\\mathbf{X} \\mathbf{X}^T\\mathbf{X} . Variance-Covariance Matrix The variance-covariance matrix \\Sigma \\Sigma of the estimated coefficients is given by: s^2\\{b\\} = MSE(\\mathbf{X}^T\\mathbf{X})^{-1} s^2\\{b\\} = MSE(\\mathbf{X}^T\\mathbf{X})^{-1} MSE MSE is the mean squared error. From the variance-covariance matrix, one can find the variances of the individual betas, and thus conduct individual t-tests. Forward Selection Using Mallows' Cp Mallows' Cp criterion is used for feature selection in multiple linear regression. The Cp statistic is calculated as follows: C_p = \\frac{SSE_p}{MSE} - N + 2(p + 1) C_p = \\frac{SSE_p}{MSE} - N + 2(p + 1) SSE_p SSE_p is the sum of squared errors for the model with p p predictors. MSE MSE is the mean squared error from the full model. N N is the total number of observations. p p is the number of predictors in the smaller model. Lower C_p C_p values indicate a model with a better fit.","title":"multipleLinearRegression"},{"location":"multipleLinearRegression/#multiplelinearregressionx-y-forwardreg-diagnostics-cl","text":"","title":"multipleLinearRegression(X, Y, forwardReg, diagnostics, CL)"},{"location":"multipleLinearRegression/#overview","text":"The multipleLinearRegression function performs multiple linear regression analysis on given data sets. This advanced function includes several features, such as forward regression based on Mallows's Cp, diagnostic statistics, and calculation of Variance Inflation Factors (VIFs). NOTE 1 : ALL T-TESTS IN THIS MODULE ARE TWO-TAILED. NOTE 2: All data point subtables within the X X table must have the same amount of entries. Currently, the table does not have an algorithm to deal with nil values (this will come very soon in 1.1). Therefore, it is the developer's responsibility to input a proper X X table and format the table beforehand. NOTE 3: Before invoking the function, ensure that the X X table is formatted correctly as a 2D table, where each inner table represents a row of the matrix. If X X is not in this format, you may use the module.matTranspose(matrix) function to transpose X X into a compatible layout. This is crucial for the proper functioning of the function. NOTE 4: The VIFs table is only there as a warning. VIF values do not impact the regression model and do not automatically remove multi-collinear predictors. You will have to manually account for this if you choose to remove a predictor yourself and thus rerun multipleLinearRegression again. StatBook v1.1 will seek to give the developer an option to automatically eliminate multi-collinear predictors based on high VIF values.","title":"Overview"},{"location":"multipleLinearRegression/#parameters","text":"Parameter Type Description Default X table The independent variables matrix (2D table). Required Y table The dependent variable vector (1D table). Required forwardReg boolean Enables or disables the forward regression process. true diagnostics boolean Enables or disables diagnostic statistics. true CL number Confidence level for t-tests and F-test. 0.95","title":"Parameters"},{"location":"multipleLinearRegression/#returns-if-diagnostics-true","text":"Variable Type Description yHat table -> number(s) Fitted values for the dependent variable. indices table -> number(s) Indices of betas retained in model from lmOrig to lmNew","title":"Returns (if diagnostics ~= true)"},{"location":"multipleLinearRegression/#returns-if-diagnostics-true_1","text":"Variable Type Description Subfields lmNew table -> tables Model after forward selection with Mallow's C(p) yes lmOrig table -> tables Model before forward selection with Mallow's C(p) yes indices table -> number(s) Indices of betas retained in model from lmOrig to lmNew","title":"Returns (if diagnostics = true)"},{"location":"multipleLinearRegression/#lmnew-and-lmorig-subfields","text":"Variable Type Description Sub-subfields yHat table -> number(s) Fitted values for the dependent variable. r2 number R^2 R^2 value indicating the goodness of fit. r2adj number Adjusted R^2 R^2 accounting for # of predictors. F number F-statistic used for hypothesis testing. pValueF number p-value of the F-statistic. BetaInfo table -> table Information about predictor coefficients. yes VIFs * table -> table Indicates multicollinearity status. yes * There isn't a VIFs subfield in lmOrig.","title":"lmNew and lmOrig Subfields*"},{"location":"multipleLinearRegression/#betainfo-sub-subfields","text":"Variable Type Description predictorIndex table -> number The original index of the beta in question. rejectH0 table -> boolean Hypotheses test results for individual betas. t table -> number The t-statistic of the beta in question. pValue table -> boolean The p-value of the beta in question.","title":"BetaInfo Sub-subfields"},{"location":"multipleLinearRegression/#vifs-sub-subfields","text":"Variable Type Description VIF table -> number Variance Inflation Factors of each beta. summaryVIF table -> string A description of potential multicollinearity","title":"VIFs Sub-subfields"},{"location":"multipleLinearRegression/#example-usage","text":"-- regression with 6 datapoints and 3 predictors local X = {{1, 4, 7}, {2, 3, 5}, {3, 2, 1}, {4, 2, 2}, {5, 8, 3}, {3, 6, 2}} local Y = {3, 3, 2, 2, 4, 5} local model = StatBook.multipleLinearRegression(X, Y) print(model.lmNew.pValueF, model.lmOrig.pValueF, model.lmNew.BetaInfo.t, model.lmNew.BetaInfo.pValue) -- can return a lot more than that -- rest is optional local Xtest = {1, 5, 6} local prediction = predictY(Xtest, model)","title":"Example Usage"},{"location":"multipleLinearRegression/#subsequent-usage","text":"After acquiring the model from module.multipleLinearRegression , you can employ the module.predictY(X, model, yHat, indices) function directly with the returned model to predict new Y Y values based on new X X values. The model object contains all necessary coefficients and information for the prediction.","title":"Subsequent Usage"},{"location":"multipleLinearRegression/#mathematical-background","text":"Multiple Linear Regression aims to model the relationship between multiple independent variables and a dependent variable by fitting a linear equation to the observed data. Here we dive into the mathematical details of how it works.","title":"Mathematical Background"},{"location":"multipleLinearRegression/#matrices","text":"A multiple linear regression model can be represented in matrix form as: \\mathbf{Y} = \\mathbf{X}\\beta + \\epsilon \\mathbf{Y} = \\mathbf{X}\\beta + \\epsilon \\mathbf{Y} \\mathbf{Y} is a n \\times 1 n \\times 1 matrix (column vector) of the dependent variable. \\mathbf{X} \\mathbf{X} is a n \\times p n \\times p matrix of the independent variables, including the intercept. \\beta \\beta is a p \\times 1 p \\times 1 matrix (column vector) of the coefficients. \\epsilon \\epsilon is a n \\times 1 n \\times 1 matrix (column vector) of the error terms.","title":"Matrices"},{"location":"multipleLinearRegression/#inverses-and-coefficients","text":"The coefficients \\beta \\beta can be estimated using the formula: \\hat{\\beta} = (\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\mathbf{Y} \\hat{\\beta} = (\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\mathbf{Y} \\mathbf{X}^T \\mathbf{X}^T is the transpose of \\mathbf{X} \\mathbf{X} . (\\mathbf{X}^T\\mathbf{X})^{-1} (\\mathbf{X}^T\\mathbf{X})^{-1} is the inverse of \\mathbf{X}^T\\mathbf{X} \\mathbf{X}^T\\mathbf{X} .","title":"Inverses and Coefficients"},{"location":"multipleLinearRegression/#variance-covariance-matrix","text":"The variance-covariance matrix \\Sigma \\Sigma of the estimated coefficients is given by: s^2\\{b\\} = MSE(\\mathbf{X}^T\\mathbf{X})^{-1} s^2\\{b\\} = MSE(\\mathbf{X}^T\\mathbf{X})^{-1} MSE MSE is the mean squared error. From the variance-covariance matrix, one can find the variances of the individual betas, and thus conduct individual t-tests.","title":"Variance-Covariance Matrix"},{"location":"multipleLinearRegression/#forward-selection-using-mallows-cp","text":"Mallows' Cp criterion is used for feature selection in multiple linear regression. The Cp statistic is calculated as follows: C_p = \\frac{SSE_p}{MSE} - N + 2(p + 1) C_p = \\frac{SSE_p}{MSE} - N + 2(p + 1) SSE_p SSE_p is the sum of squared errors for the model with p p predictors. MSE MSE is the mean squared error from the full model. N N is the total number of observations. p p is the number of predictors in the smaller model. Lower C_p C_p values indicate a model with a better fit.","title":"Forward Selection Using Mallows' Cp"},{"location":"oddsRatio/","text":"oddsRatio(O11, O12, O21, O22, CL) Overview The oddsRatio function calculates the odds ratio for a 2x2 contingency table, along with the confidence intervals and hypothesis testing for independence. It can be particularly useful in epidemiological studies and statistical analysis of categorical data. Parameters Parameter Type Description Default O11 Number Count for group 1 with characteristic A. - O12 Number Count for group 1 without characteristic A. - O21 Number Count for group 2 with characteristic A. - O22 Number Count for group 2 without characteristic A. - CL Number Confidence level for the confidence interval of the odds ratio. 0.95 Returns Return Type Description OR Number The calculated odds ratio. rejectH0 Bool Whether to reject the null hypothesis of independence. lowerCI Number Lower bound of the confidence interval for the odds ratio. upperCI Number Upper bound of the confidence interval for the odds ratio. Example local O11 = 13 local O12 = 9 local O21 = 8 local O22 = 6 local CL = 0.95 local result = oddsRatio(O11, O12, O21, O22, CL) print(result.OR, result.rejectH0, result.lowerCI, result.upperCI) -- Output will vary based on the input Mathematical Background The odds ratio OR OR is calculated as: OR = \\frac{(O11 / O12)}{(O21 / O22)} OR = \\frac{(O11 / O12)}{(O21 / O22)} The confidence interval for the odds ratio is calculated using: \\text{Lower bound} = e^{\\ln(OR) - Z \\times \\sigma} \\text{Lower bound} = e^{\\ln(OR) - Z \\times \\sigma} \\text{Upper bound} = e^{\\ln(OR) + Z \\times \\sigma} \\text{Upper bound} = e^{\\ln(OR) + Z \\times \\sigma} where \\sigma = \\sqrt{\\frac{1}{O11} + \\frac{1}{O12} + \\frac{1}{O21} + \\frac{1}{O22}} \\sigma = \\sqrt{\\frac{1}{O11} + \\frac{1}{O12} + \\frac{1}{O21} + \\frac{1}{O22}} and Z Z is the value from the inverse of the standard normal distribution corresponding to a 1- \\alpha/2 \\alpha/2 confidence level. The null hypothesis H0 H0 is rejected if the confidence interval does not include 1.","title":"oddsRatio"},{"location":"oddsRatio/#oddsratioo11-o12-o21-o22-cl","text":"","title":"oddsRatio(O11, O12, O21, O22, CL)"},{"location":"oddsRatio/#overview","text":"The oddsRatio function calculates the odds ratio for a 2x2 contingency table, along with the confidence intervals and hypothesis testing for independence. It can be particularly useful in epidemiological studies and statistical analysis of categorical data.","title":"Overview"},{"location":"oddsRatio/#parameters","text":"Parameter Type Description Default O11 Number Count for group 1 with characteristic A. - O12 Number Count for group 1 without characteristic A. - O21 Number Count for group 2 with characteristic A. - O22 Number Count for group 2 without characteristic A. - CL Number Confidence level for the confidence interval of the odds ratio. 0.95","title":"Parameters"},{"location":"oddsRatio/#returns","text":"Return Type Description OR Number The calculated odds ratio. rejectH0 Bool Whether to reject the null hypothesis of independence. lowerCI Number Lower bound of the confidence interval for the odds ratio. upperCI Number Upper bound of the confidence interval for the odds ratio.","title":"Returns"},{"location":"oddsRatio/#example","text":"local O11 = 13 local O12 = 9 local O21 = 8 local O22 = 6 local CL = 0.95 local result = oddsRatio(O11, O12, O21, O22, CL) print(result.OR, result.rejectH0, result.lowerCI, result.upperCI) -- Output will vary based on the input","title":"Example"},{"location":"oddsRatio/#mathematical-background","text":"The odds ratio OR OR is calculated as: OR = \\frac{(O11 / O12)}{(O21 / O22)} OR = \\frac{(O11 / O12)}{(O21 / O22)} The confidence interval for the odds ratio is calculated using: \\text{Lower bound} = e^{\\ln(OR) - Z \\times \\sigma} \\text{Lower bound} = e^{\\ln(OR) - Z \\times \\sigma} \\text{Upper bound} = e^{\\ln(OR) + Z \\times \\sigma} \\text{Upper bound} = e^{\\ln(OR) + Z \\times \\sigma} where \\sigma = \\sqrt{\\frac{1}{O11} + \\frac{1}{O12} + \\frac{1}{O21} + \\frac{1}{O22}} \\sigma = \\sqrt{\\frac{1}{O11} + \\frac{1}{O12} + \\frac{1}{O21} + \\frac{1}{O22}} and Z Z is the value from the inverse of the standard normal distribution corresponding to a 1- \\alpha/2 \\alpha/2 confidence level. The null hypothesis H0 H0 is rejected if the confidence interval does not include 1.","title":"Mathematical Background"},{"location":"oneSampleProportionCI/","text":"oneSampleProportionCI(k, n, CL) Overview The oneSampleProportionCI function calculates a confidence interval for a proportion in a statistical population, based on the proportion observed in a sample. The function employs the Wald-Agresti-Coull (WAC) method, a modified version of the standard Wald method to calculate the confidence interval. Parameters Parameter Type Description Default k Number Number of successful outcomes in the sample. - n Number Total number of trials in the sample. - CL Number Confidence level for the confidence interval. 0.95 Returns Return Type Description pHat Number The estimated proportion based on the sample. lowerCI Number Lower bound of the confidence interval for the proportion. upperCI Number Upper bound of the confidence interval for the proportion. testType String Specifies the type of test conducted, in this case, \"One Sample Proportion CI\". Example local k = 55 local n = 100 local CL = 0.95 local result = oneSampleProportionCI(k, n, CL) print(result.pHat, result.lowerCI, result.upperCI, result.testType) -- Output will vary based on the input Mathematical Background The estimated proportion \\hat{p} \\hat{p} is calculated as: \\hat{p} = \\frac{k + 2}{n + 4} \\hat{p} = \\frac{k + 2}{n + 4} The standard error SE SE of the estimated proportion is calculated using: SE = \\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n + 4}} SE = \\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n + 4}} The confidence interval is given by: \\text{Lower CI} = \\hat{p} - Z_{\\alpha/2} \\times SE \\text{Lower CI} = \\hat{p} - Z_{\\alpha/2} \\times SE \\text{Upper CI} = \\hat{p} + Z_{\\alpha/2} \\times SE \\text{Upper CI} = \\hat{p} + Z_{\\alpha/2} \\times SE where Z_{\\alpha/2} Z_{\\alpha/2} is the value from the inverse of the standard normal distribution corresponding to a 1- \\alpha/2 \\alpha/2 confidence level.","title":"oneSampleProportionCI"},{"location":"oneSampleProportionCI/#onesampleproportioncik-n-cl","text":"","title":"oneSampleProportionCI(k, n, CL)"},{"location":"oneSampleProportionCI/#overview","text":"The oneSampleProportionCI function calculates a confidence interval for a proportion in a statistical population, based on the proportion observed in a sample. The function employs the Wald-Agresti-Coull (WAC) method, a modified version of the standard Wald method to calculate the confidence interval.","title":"Overview"},{"location":"oneSampleProportionCI/#parameters","text":"Parameter Type Description Default k Number Number of successful outcomes in the sample. - n Number Total number of trials in the sample. - CL Number Confidence level for the confidence interval. 0.95","title":"Parameters"},{"location":"oneSampleProportionCI/#returns","text":"Return Type Description pHat Number The estimated proportion based on the sample. lowerCI Number Lower bound of the confidence interval for the proportion. upperCI Number Upper bound of the confidence interval for the proportion. testType String Specifies the type of test conducted, in this case, \"One Sample Proportion CI\".","title":"Returns"},{"location":"oneSampleProportionCI/#example","text":"local k = 55 local n = 100 local CL = 0.95 local result = oneSampleProportionCI(k, n, CL) print(result.pHat, result.lowerCI, result.upperCI, result.testType) -- Output will vary based on the input","title":"Example"},{"location":"oneSampleProportionCI/#mathematical-background","text":"The estimated proportion \\hat{p} \\hat{p} is calculated as: \\hat{p} = \\frac{k + 2}{n + 4} \\hat{p} = \\frac{k + 2}{n + 4} The standard error SE SE of the estimated proportion is calculated using: SE = \\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n + 4}} SE = \\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n + 4}} The confidence interval is given by: \\text{Lower CI} = \\hat{p} - Z_{\\alpha/2} \\times SE \\text{Lower CI} = \\hat{p} - Z_{\\alpha/2} \\times SE \\text{Upper CI} = \\hat{p} + Z_{\\alpha/2} \\times SE \\text{Upper CI} = \\hat{p} + Z_{\\alpha/2} \\times SE where Z_{\\alpha/2} Z_{\\alpha/2} is the value from the inverse of the standard normal distribution corresponding to a 1- \\alpha/2 \\alpha/2 confidence level.","title":"Mathematical Background"},{"location":"predictY/","text":"predictY(X, model, yHat, indices) Overview The predictY function predicts the dependent variable Y Y based on the independent variable X X and the given model. Optionally, it allows for specific fitted values \\hat{y} \\hat{y} and predictor indices to be specified. Parameters Parameter Type Description Default X Table The input vector containing independent variable values. - model Table The regression model from multipleLinearRegression() - yHat Table Optional. The fitted values for the intercept and coefficients. nil indices Table Optional. The indices in the model to be used for prediction. nil Returns Return Type Description YPred Number The predicted value of the dependent variable Y Y . Example local X = {{1, 4, 7}, {2, 3, 5}, {3, 2, 1}, {4, 2, 2}, {5, 8, 3}, {3, 6, 2}} local Y = {3, 3, 2, 2, 4, 5} local model = StatBook.multipleLinearRegression(X, Y) local Xtest = {1, 5, 6} local YPred = module.predictY(Xtest, model) print(YPred)","title":"predictY"},{"location":"predictY/#predictyx-model-yhat-indices","text":"","title":"predictY(X, model, yHat, indices)"},{"location":"predictY/#overview","text":"The predictY function predicts the dependent variable Y Y based on the independent variable X X and the given model. Optionally, it allows for specific fitted values \\hat{y} \\hat{y} and predictor indices to be specified.","title":"Overview"},{"location":"predictY/#parameters","text":"Parameter Type Description Default X Table The input vector containing independent variable values. - model Table The regression model from multipleLinearRegression() - yHat Table Optional. The fitted values for the intercept and coefficients. nil indices Table Optional. The indices in the model to be used for prediction. nil","title":"Parameters"},{"location":"predictY/#returns","text":"Return Type Description YPred Number The predicted value of the dependent variable Y Y .","title":"Returns"},{"location":"predictY/#example","text":"local X = {{1, 4, 7}, {2, 3, 5}, {3, 2, 1}, {4, 2, 2}, {5, 8, 3}, {3, 6, 2}} local Y = {3, 3, 2, 2, 4, 5} local model = StatBook.multipleLinearRegression(X, Y) local Xtest = {1, 5, 6} local YPred = module.predictY(Xtest, model) print(YPred)","title":"Example"},{"location":"randomFromDataset/","text":"randomFromDataset(values, kernel, percentageOfFrameTime, bandwidth) Overview Generates a random number based on a given dataset using Kernel Density Estimation (KDE). Parameters Parameter Type Description values Table The dataset from which to generate the random number. kernel * String The type of kernel to use for the KDE. Default is Gaussian. percentageOfFrameTime Number The percentage of frame time allowed for the function to run. Default is 0.1. bandwidth Number The bandwidth to use in the KDE. Calculated by default if not provided. * Options for kernel are: \"Gaussian\", \"Epanechnikov\", \"Uniform\", \"Triangular\", \"Biweight\", \"Cosine\", \"Logistic\", and \"Sigmoid\". Returns Return Type Description xRandom Number A random number generated based on the KDE of the dataset. Example local dataset = {1, 2, 3, 3, 4, 4, 5, 6, 7} local kernelType = \"Gaussian\" local percentageOfFrameTime = 0.1 local randomValue = StatBook.randomFromDataset(dataset, kernelType, percentageOfFrameTime) print(randomValue) -- Output will vary Mathematical Background The function uses Kernel Density Estimation (KDE) to approximate the probability density function of the given dataset. The KDE is computed for multiple points within the data range, and the maximum density \\text{maxY} \\text{maxY} is determined. Random coordinates (x, y) (x, y) are generated within this computed density. The y y -value of the coordinate is compared to the KDE value at x x , and if y \\leq \\text{KDE}(x) y \\leq \\text{KDE}(x) , then x x is returned as the generated random number. The kernel density estimation is given by: \\text{KDE}(x) = \\frac{1}{n \\times \\text{bandwidth}} \\sum_{i=1}^{n} K\\left(\\frac{x - x_i}{\\text{bandwidth}}\\right) \\text{KDE}(x) = \\frac{1}{n \\times \\text{bandwidth}} \\sum_{i=1}^{n} K\\left(\\frac{x - x_i}{\\text{bandwidth}}\\right) where K(u) K(u) is the kernel function and n n is the number of data points. Different types of kernel functions like Gaussian, Epanechnikov, etc., can be used.","title":"randomFromDataset"},{"location":"randomFromDataset/#randomfromdatasetvalues-kernel-percentageofframetime-bandwidth","text":"","title":"randomFromDataset(values, kernel, percentageOfFrameTime, bandwidth)"},{"location":"randomFromDataset/#overview","text":"Generates a random number based on a given dataset using Kernel Density Estimation (KDE).","title":"Overview"},{"location":"randomFromDataset/#parameters","text":"Parameter Type Description values Table The dataset from which to generate the random number. kernel * String The type of kernel to use for the KDE. Default is Gaussian. percentageOfFrameTime Number The percentage of frame time allowed for the function to run. Default is 0.1. bandwidth Number The bandwidth to use in the KDE. Calculated by default if not provided. * Options for kernel are: \"Gaussian\", \"Epanechnikov\", \"Uniform\", \"Triangular\", \"Biweight\", \"Cosine\", \"Logistic\", and \"Sigmoid\".","title":"Parameters"},{"location":"randomFromDataset/#returns","text":"Return Type Description xRandom Number A random number generated based on the KDE of the dataset.","title":"Returns"},{"location":"randomFromDataset/#example","text":"local dataset = {1, 2, 3, 3, 4, 4, 5, 6, 7} local kernelType = \"Gaussian\" local percentageOfFrameTime = 0.1 local randomValue = StatBook.randomFromDataset(dataset, kernelType, percentageOfFrameTime) print(randomValue) -- Output will vary","title":"Example"},{"location":"randomFromDataset/#mathematical-background","text":"The function uses Kernel Density Estimation (KDE) to approximate the probability density function of the given dataset. The KDE is computed for multiple points within the data range, and the maximum density \\text{maxY} \\text{maxY} is determined. Random coordinates (x, y) (x, y) are generated within this computed density. The y y -value of the coordinate is compared to the KDE value at x x , and if y \\leq \\text{KDE}(x) y \\leq \\text{KDE}(x) , then x x is returned as the generated random number. The kernel density estimation is given by: \\text{KDE}(x) = \\frac{1}{n \\times \\text{bandwidth}} \\sum_{i=1}^{n} K\\left(\\frac{x - x_i}{\\text{bandwidth}}\\right) \\text{KDE}(x) = \\frac{1}{n \\times \\text{bandwidth}} \\sum_{i=1}^{n} K\\left(\\frac{x - x_i}{\\text{bandwidth}}\\right) where K(u) K(u) is the kernel function and n n is the number of data points. Different types of kernel functions like Gaussian, Epanechnikov, etc., can be used.","title":"Mathematical Background"},{"location":"range/","text":"range(list) Overview The range function calculates the range of a given list of numbers. The range is the difference between the maximum and minimum values in the list. Parameters Parameter Name Type Description Required Default Value list table A list of numerical values to find the range from. The list must contain at least two numerical values. Yes N/A Returns Type Description Possible Values number The range of the list, calculated as the difference between the maximum and minimum values. Any numerical value Constraints The list parameter must be a table containing numerical values only. The table must have at least two elements; otherwise, the function will return an undefined result. Example Use local myList = {1, 2, 3, 4, 5} local result = StatBook.range(myList) -- The range of the list {1, 2, 3, 4, 5} is (5 - 1) = 4 print(result)","title":"range"},{"location":"range/#rangelist","text":"","title":"range(list)"},{"location":"range/#overview","text":"The range function calculates the range of a given list of numbers. The range is the difference between the maximum and minimum values in the list.","title":"Overview"},{"location":"range/#parameters","text":"Parameter Name Type Description Required Default Value list table A list of numerical values to find the range from. The list must contain at least two numerical values. Yes N/A","title":"Parameters"},{"location":"range/#returns","text":"Type Description Possible Values number The range of the list, calculated as the difference between the maximum and minimum values. Any numerical value","title":"Returns"},{"location":"range/#constraints","text":"The list parameter must be a table containing numerical values only. The table must have at least two elements; otherwise, the function will return an undefined result.","title":"Constraints"},{"location":"range/#example-use","text":"local myList = {1, 2, 3, 4, 5} local result = StatBook.range(myList) -- The range of the list {1, 2, 3, 4, 5} is (5 - 1) = 4 print(result)","title":"Example Use"},{"location":"regularizedIncompleteBeta/","text":"regularizedIncompleteBeta(a, b, x) Overview The regularizedIncompleteBeta function calculates the regularized incomplete Beta function I_x(a, b) I_x(a, b) for given parameters a a , b b , and x x . Parameters Parameter Type Description a Number First parameter of the regularized incomplete Beta function. b Number Second parameter of the regularized incomplete Beta function. x Number Value at which the regularized incomplete Beta function is evaluated. Returns Return Type Description regincbeta Number The calculated value of the regularized incomplete Beta function. Example local a = 2.5 local b = 1.5 local x = 0.4 local result = StatBook.regularizedIncompleteBeta(a, b, x) print(result) -- Output will vary depending on input parameters Mathematical Background The regularized incomplete Beta function I_x(a, b) I_x(a, b) is calculated using the formula: I_x(a, b) = \\frac{{\\text{incompleteBeta}(a, b, x)}}{\\frac{\\Gamma(a) \\times \\Gamma(b)}{\\Gamma(a + b)}} I_x(a, b) = \\frac{{\\text{incompleteBeta}(a, b, x)}}{\\frac{\\Gamma(a) \\times \\Gamma(b)}{\\Gamma(a + b)}} Here, \\text{incompleteBeta}(a, b, x) \\text{incompleteBeta}(a, b, x) is the incomplete Beta function and \\Gamma \\Gamma is the Gamma function. The function is a wrapper for the incompleteBeta and Gamma functions, which provide the necessary calculations for the incomplete Beta and Gamma terms in the regularized incomplete Beta function formula.","title":"regularizedIncompleteBeta"},{"location":"regularizedIncompleteBeta/#regularizedincompletebetaa-b-x","text":"","title":"regularizedIncompleteBeta(a, b, x)"},{"location":"regularizedIncompleteBeta/#overview","text":"The regularizedIncompleteBeta function calculates the regularized incomplete Beta function I_x(a, b) I_x(a, b) for given parameters a a , b b , and x x .","title":"Overview"},{"location":"regularizedIncompleteBeta/#parameters","text":"Parameter Type Description a Number First parameter of the regularized incomplete Beta function. b Number Second parameter of the regularized incomplete Beta function. x Number Value at which the regularized incomplete Beta function is evaluated.","title":"Parameters"},{"location":"regularizedIncompleteBeta/#returns","text":"Return Type Description regincbeta Number The calculated value of the regularized incomplete Beta function.","title":"Returns"},{"location":"regularizedIncompleteBeta/#example","text":"local a = 2.5 local b = 1.5 local x = 0.4 local result = StatBook.regularizedIncompleteBeta(a, b, x) print(result) -- Output will vary depending on input parameters","title":"Example"},{"location":"regularizedIncompleteBeta/#mathematical-background","text":"The regularized incomplete Beta function I_x(a, b) I_x(a, b) is calculated using the formula: I_x(a, b) = \\frac{{\\text{incompleteBeta}(a, b, x)}}{\\frac{\\Gamma(a) \\times \\Gamma(b)}{\\Gamma(a + b)}} I_x(a, b) = \\frac{{\\text{incompleteBeta}(a, b, x)}}{\\frac{\\Gamma(a) \\times \\Gamma(b)}{\\Gamma(a + b)}} Here, \\text{incompleteBeta}(a, b, x) \\text{incompleteBeta}(a, b, x) is the incomplete Beta function and \\Gamma \\Gamma is the Gamma function. The function is a wrapper for the incompleteBeta and Gamma functions, which provide the necessary calculations for the incomplete Beta and Gamma terms in the regularized incomplete Beta function formula.","title":"Mathematical Background"},{"location":"scalarMatMult/","text":"scalarMatMult(scalar, matrix) The scalarMatMult function multiplies a given scalar with every element of a provided matrix. The function returns a new matrix containing the results. Parameters Parameter Type Description Default scalar number The scalar value to multiply with the matrix. Required matrix table The matrix, represented as a 2D table. Required Returns Variable Type Description resultMatrix table A new matrix represented as a 2D table, resulting from the scalar multiplication of the input matrix. Example local scalar = 2 local matrix = { {1, 2}, {3, 4} } local result = StatsBook.scalarMatMult(scalar, matrix)","title":"scalarMatMult"},{"location":"scalarMatMult/#scalarmatmultscalar-matrix","text":"The scalarMatMult function multiplies a given scalar with every element of a provided matrix. The function returns a new matrix containing the results.","title":"scalarMatMult(scalar, matrix)"},{"location":"scalarMatMult/#parameters","text":"Parameter Type Description Default scalar number The scalar value to multiply with the matrix. Required matrix table The matrix, represented as a 2D table. Required","title":"Parameters"},{"location":"scalarMatMult/#returns","text":"Variable Type Description resultMatrix table A new matrix represented as a 2D table, resulting from the scalar multiplication of the input matrix.","title":"Returns"},{"location":"scalarMatMult/#example","text":"local scalar = 2 local matrix = { {1, 2}, {3, 4} } local result = StatsBook.scalarMatMult(scalar, matrix)","title":"Example"},{"location":"singleProportionInference/","text":"singleProportionInference(k, n, p, CL) Description The singleProportionInference(k, n, p, CL) function performs hypothesis testing for a single proportion. It chooses between using a Large Sample Proportion Test or an Exact Binomial Test based on the sample size and the probability. Parameters Parameter Type Description Default k number The number of successes in the sample. Required n number The sample size. Required p number The hypothesized population proportion. Required CL number The Confidence Level for the test. 0.95 Returns Variable Type Description pValue number The p-value of the test. rejectH0 boolean Indicates whether to reject the null hypothesis. stat number The test statistic (Z for Large Sample, None for Exact). df number Degrees of freedom (1 for Large Sample, None for Exact). pTest number The hypothesized population proportion. pHat number The sample proportion. lowerCI number Lower bound of the confidence interval. upperCI number Upper bound of the confidence interval. parametric boolean Indicates if the test is parametric (true for Large Sample, false for Exact). testType string Type of the test conducted (\"Large Sample Proportion Test\" or \"Exact Binomial Test\"). statType string Type of the statistic used (\"Z\" for Large Sample, None for Exact). Examples -- Example 1: Large sample size local result = StatBook.singleProportionInference(40, 100, 0.35, 0.95) -- Output will show Large Sample Proportion Test results -- Example 2: Small sample size local result = StatBook.singleProportionInference(4, 10, 0.35, 0.95) -- Output will show Exact Binomial Test results Notes If (n * p) >= 5 and (n * (1 - p)) >= 5, a Large Sample Proportion Test is conducted. Otherwise, an Exact Binomial Test is conducted.","title":"singleProportionInference"},{"location":"singleProportionInference/#singleproportioninferencek-n-p-cl","text":"","title":"singleProportionInference(k, n, p, CL)"},{"location":"singleProportionInference/#description","text":"The singleProportionInference(k, n, p, CL) function performs hypothesis testing for a single proportion. It chooses between using a Large Sample Proportion Test or an Exact Binomial Test based on the sample size and the probability.","title":"Description"},{"location":"singleProportionInference/#parameters","text":"Parameter Type Description Default k number The number of successes in the sample. Required n number The sample size. Required p number The hypothesized population proportion. Required CL number The Confidence Level for the test. 0.95","title":"Parameters"},{"location":"singleProportionInference/#returns","text":"Variable Type Description pValue number The p-value of the test. rejectH0 boolean Indicates whether to reject the null hypothesis. stat number The test statistic (Z for Large Sample, None for Exact). df number Degrees of freedom (1 for Large Sample, None for Exact). pTest number The hypothesized population proportion. pHat number The sample proportion. lowerCI number Lower bound of the confidence interval. upperCI number Upper bound of the confidence interval. parametric boolean Indicates if the test is parametric (true for Large Sample, false for Exact). testType string Type of the test conducted (\"Large Sample Proportion Test\" or \"Exact Binomial Test\"). statType string Type of the statistic used (\"Z\" for Large Sample, None for Exact).","title":"Returns"},{"location":"singleProportionInference/#examples","text":"-- Example 1: Large sample size local result = StatBook.singleProportionInference(40, 100, 0.35, 0.95) -- Output will show Large Sample Proportion Test results -- Example 2: Small sample size local result = StatBook.singleProportionInference(4, 10, 0.35, 0.95) -- Output will show Exact Binomial Test results","title":"Examples"},{"location":"singleProportionInference/#notes","text":"If (n * p) >= 5 and (n * (1 - p)) >= 5, a Large Sample Proportion Test is conducted. Otherwise, an Exact Binomial Test is conducted.","title":"Notes"},{"location":"standard_deviation/","text":"standardDeviation(list) Overview The standardDeviation function calculates the sample standard deviation (SD) of a given list of numbers. The standard deviation is a measure of the amount of variation or dispersion of a set of values. Parameters Parameter Name Type Description Required Default Value list table A list of numerical values for which the standard deviation will be calculated. The list must contain at least two numerical values. Yes N/A Returns Type Description Possible Values number The sample standard deviation of the elements in the list. The return value will be a floating-point number. Any numerical value Constraints The list parameter must be a table containing numerical values only. The table must have at least two elements; otherwise, the function will return 0 as there's not enough data to calculate the standard deviation. It finds the sample SD, not population SD. Example Use local myList = {1, 2, 3, 4, 5} -- The standard deviation of the list {1, 2, 3, 4, 5} will be calculated local result = StatBook.standardDeviation(myList) -- Output will be the calculated standard deviation print(result)","title":"standardDeviation"},{"location":"standard_deviation/#standarddeviationlist","text":"","title":"standardDeviation(list)"},{"location":"standard_deviation/#overview","text":"The standardDeviation function calculates the sample standard deviation (SD) of a given list of numbers. The standard deviation is a measure of the amount of variation or dispersion of a set of values.","title":"Overview"},{"location":"standard_deviation/#parameters","text":"Parameter Name Type Description Required Default Value list table A list of numerical values for which the standard deviation will be calculated. The list must contain at least two numerical values. Yes N/A","title":"Parameters"},{"location":"standard_deviation/#returns","text":"Type Description Possible Values number The sample standard deviation of the elements in the list. The return value will be a floating-point number. Any numerical value","title":"Returns"},{"location":"standard_deviation/#constraints","text":"The list parameter must be a table containing numerical values only. The table must have at least two elements; otherwise, the function will return 0 as there's not enough data to calculate the standard deviation. It finds the sample SD, not population SD.","title":"Constraints"},{"location":"standard_deviation/#example-use","text":"local myList = {1, 2, 3, 4, 5} -- The standard deviation of the list {1, 2, 3, 4, 5} will be calculated local result = StatBook.standardDeviation(myList) -- Output will be the calculated standard deviation print(result)","title":"Example Use"},{"location":"sum_of_squares/","text":"sumOfSquares(list) Overview The sumOfSquares function calculates the sum of squares of deviations from the mean for a given list of numbers. The function utilizes the mean of the list to calculate each deviation. Parameters Parameter Type Description list table A list of numbers to calculate the sum of squares for. Returns Type Description number The sum of squares of deviations from the mean. Example Use local StatBook = require(\"StatBook\") local myList = {1, 2, 3, 4, 5} local result = StatBook.sumOfSquares(myList) print(result) -- Output will depend on the values in myList","title":"sumOfSquares"},{"location":"sum_of_squares/#sumofsquareslist","text":"","title":"sumOfSquares(list)"},{"location":"sum_of_squares/#overview","text":"The sumOfSquares function calculates the sum of squares of deviations from the mean for a given list of numbers. The function utilizes the mean of the list to calculate each deviation.","title":"Overview"},{"location":"sum_of_squares/#parameters","text":"Parameter Type Description list table A list of numbers to calculate the sum of squares for.","title":"Parameters"},{"location":"sum_of_squares/#returns","text":"Type Description number The sum of squares of deviations from the mean.","title":"Returns"},{"location":"sum_of_squares/#example-use","text":"local StatBook = require(\"StatBook\") local myList = {1, 2, 3, 4, 5} local result = StatBook.sumOfSquares(myList) print(result) -- Output will depend on the values in myList","title":"Example Use"},{"location":"twoProportionInference/","text":"twoProportionInference(k1, n1, k2, n2, CL) Overview The twoProportionInference function performs statistical inference on two independent proportions. It calculates the confidence interval and p-value for the difference between two proportions p_1 p_1 and p_2 p_2 . Parameters Parameter Type Description Default k1 Number Number of successful outcomes in the first sample. - n1 Number Total number of trials in the first sample. - k2 Number Number of successful outcomes in the second sample. - n2 Number Total number of trials in the second sample. - CL Number Confidence level for the confidence interval. 0.95 Returns Return Type Description pValue Number The p-value of the Z-test. rejectH0 Boolean Whether to reject the null hypothesis at the given alpha. stat Number The Z-score of the test. pHat Table -> Number Estimated proportions for both samples and overall. lowerCI Number Lower bound of the confidence interval for p_1 - p_2 p_1 - p_2 . upperCI Number Upper bound of the confidence interval for p_1 - p_2 p_1 - p_2 . parametric Boolean Whether the test is parametric (always true for Z-test). testType String Specifies the type of test, \"Two Proportion Test\". statType String Specifies the type of statistic used, \"Z\". warning Boolean Whether the sample size is too small for a reliable test. Example local k1 = 50 local n1 = 100 local k2 = 40 local n2 = 90 local CL = 0.95 local result = twoProportionInference(k1, n1, k2, n2, CL) print(result.pValue, result.rejectH0, result.stat, result.lowerCI, result.upperCI) -- Output will vary based on the input Mathematical Background The pooled proportion \\hat{p} \\hat{p} is calculated as: \\hat{p} = \\frac{k_1 + k_2}{n_1 + n_2} \\hat{p} = \\frac{k_1 + k_2}{n_1 + n_2} The standard error SE SE is calculated using: SE = \\sqrt{\\hat{p}(1 - \\hat{p})\\left(\\frac{1}{n_1} + \\frac{1}{n_2}\\right)} SE = \\sqrt{\\hat{p}(1 - \\hat{p})\\left(\\frac{1}{n_1} + \\frac{1}{n_2}\\right)} The confidence interval is given by: \\text{Lower CI} = \\text{max}\\left(\\hat{p}_1 - \\hat{p}_2 - Z_{\\alpha/2} \\times \\sqrt{\\frac{\\hat{p}_1(1-\\hat{p}_1)}{n_1} + \\frac{\\hat{p}_2(1-\\hat{p}_2)}{n_2}}, -1\\right) \\text{Lower CI} = \\text{max}\\left(\\hat{p}_1 - \\hat{p}_2 - Z_{\\alpha/2} \\times \\sqrt{\\frac{\\hat{p}_1(1-\\hat{p}_1)}{n_1} + \\frac{\\hat{p}_2(1-\\hat{p}_2)}{n_2}}, -1\\right) \\text{Upper CI} = \\text{min}\\left(\\hat{p}_1 - \\hat{p}_2 + Z_{\\alpha/2} \\times \\sqrt{\\frac{\\hat{p}_1(1-\\hat{p}_1)}{n_1} + \\frac{\\hat{p}_2(1-\\hat{p}_2)}{n_2}}, 1\\right) \\text{Upper CI} = \\text{min}\\left(\\hat{p}_1 - \\hat{p}_2 + Z_{\\alpha/2} \\times \\sqrt{\\frac{\\hat{p}_1(1-\\hat{p}_1)}{n_1} + \\frac{\\hat{p}_2(1-\\hat{p}_2)}{n_2}}, 1\\right) The Z-score Z Z and p-value are also calculated based on the above statistics.","title":"twoProportionInference"},{"location":"twoProportionInference/#twoproportioninferencek1-n1-k2-n2-cl","text":"","title":"twoProportionInference(k1, n1, k2, n2, CL)"},{"location":"twoProportionInference/#overview","text":"The twoProportionInference function performs statistical inference on two independent proportions. It calculates the confidence interval and p-value for the difference between two proportions p_1 p_1 and p_2 p_2 .","title":"Overview"},{"location":"twoProportionInference/#parameters","text":"Parameter Type Description Default k1 Number Number of successful outcomes in the first sample. - n1 Number Total number of trials in the first sample. - k2 Number Number of successful outcomes in the second sample. - n2 Number Total number of trials in the second sample. - CL Number Confidence level for the confidence interval. 0.95","title":"Parameters"},{"location":"twoProportionInference/#returns","text":"Return Type Description pValue Number The p-value of the Z-test. rejectH0 Boolean Whether to reject the null hypothesis at the given alpha. stat Number The Z-score of the test. pHat Table -> Number Estimated proportions for both samples and overall. lowerCI Number Lower bound of the confidence interval for p_1 - p_2 p_1 - p_2 . upperCI Number Upper bound of the confidence interval for p_1 - p_2 p_1 - p_2 . parametric Boolean Whether the test is parametric (always true for Z-test). testType String Specifies the type of test, \"Two Proportion Test\". statType String Specifies the type of statistic used, \"Z\". warning Boolean Whether the sample size is too small for a reliable test.","title":"Returns"},{"location":"twoProportionInference/#example","text":"local k1 = 50 local n1 = 100 local k2 = 40 local n2 = 90 local CL = 0.95 local result = twoProportionInference(k1, n1, k2, n2, CL) print(result.pValue, result.rejectH0, result.stat, result.lowerCI, result.upperCI) -- Output will vary based on the input","title":"Example"},{"location":"twoProportionInference/#mathematical-background","text":"The pooled proportion \\hat{p} \\hat{p} is calculated as: \\hat{p} = \\frac{k_1 + k_2}{n_1 + n_2} \\hat{p} = \\frac{k_1 + k_2}{n_1 + n_2} The standard error SE SE is calculated using: SE = \\sqrt{\\hat{p}(1 - \\hat{p})\\left(\\frac{1}{n_1} + \\frac{1}{n_2}\\right)} SE = \\sqrt{\\hat{p}(1 - \\hat{p})\\left(\\frac{1}{n_1} + \\frac{1}{n_2}\\right)} The confidence interval is given by: \\text{Lower CI} = \\text{max}\\left(\\hat{p}_1 - \\hat{p}_2 - Z_{\\alpha/2} \\times \\sqrt{\\frac{\\hat{p}_1(1-\\hat{p}_1)}{n_1} + \\frac{\\hat{p}_2(1-\\hat{p}_2)}{n_2}}, -1\\right) \\text{Lower CI} = \\text{max}\\left(\\hat{p}_1 - \\hat{p}_2 - Z_{\\alpha/2} \\times \\sqrt{\\frac{\\hat{p}_1(1-\\hat{p}_1)}{n_1} + \\frac{\\hat{p}_2(1-\\hat{p}_2)}{n_2}}, -1\\right) \\text{Upper CI} = \\text{min}\\left(\\hat{p}_1 - \\hat{p}_2 + Z_{\\alpha/2} \\times \\sqrt{\\frac{\\hat{p}_1(1-\\hat{p}_1)}{n_1} + \\frac{\\hat{p}_2(1-\\hat{p}_2)}{n_2}}, 1\\right) \\text{Upper CI} = \\text{min}\\left(\\hat{p}_1 - \\hat{p}_2 + Z_{\\alpha/2} \\times \\sqrt{\\frac{\\hat{p}_1(1-\\hat{p}_1)}{n_1} + \\frac{\\hat{p}_2(1-\\hat{p}_2)}{n_2}}, 1\\right) The Z-score Z Z and p-value are also calculated based on the above statistics.","title":"Mathematical Background"},{"location":"variance/","text":"variance(list) Overview The variance function calculates the sample variance of a given list of numbers. Variance is a statistical measurement of the spread between numbers in a dataset. Parameters Parameter Name Type Description Required Default Value list table A list of numerical values for which the variance will be calculated. The list must contain at least two numerical values. Yes N/A Returns Type Description Possible Values number The sample variance of the elements in the list. The return value will be a floating-point number. Any numerical value Constraints The list parameter must be a table containing numerical values only. The table must have at least two elements; otherwise, the function will return 0 as there's not enough data to calculate the variance. It finds the sample variance, not population variance. Example Use local myList = {1, 2, 3, 4, 5} -- The sample variance will be 2.5 local result = StatBook.variance(myList) print(result)","title":"variance"},{"location":"variance/#variancelist","text":"","title":"variance(list)"},{"location":"variance/#overview","text":"The variance function calculates the sample variance of a given list of numbers. Variance is a statistical measurement of the spread between numbers in a dataset.","title":"Overview"},{"location":"variance/#parameters","text":"Parameter Name Type Description Required Default Value list table A list of numerical values for which the variance will be calculated. The list must contain at least two numerical values. Yes N/A","title":"Parameters"},{"location":"variance/#returns","text":"Type Description Possible Values number The sample variance of the elements in the list. The return value will be a floating-point number. Any numerical value","title":"Returns"},{"location":"variance/#constraints","text":"The list parameter must be a table containing numerical values only. The table must have at least two elements; otherwise, the function will return 0 as there's not enough data to calculate the variance. It finds the sample variance, not population variance.","title":"Constraints"},{"location":"variance/#example-use","text":"local myList = {1, 2, 3, 4, 5} -- The sample variance will be 2.5 local result = StatBook.variance(myList) print(result)","title":"Example Use"}]}